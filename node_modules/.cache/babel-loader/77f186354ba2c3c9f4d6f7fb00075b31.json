{"ast":null,"code":"import { highlightSpecialChars, drawSelection, highlightActiveLine, keymap } from '@codemirror/view';\nexport { EditorView } from '@codemirror/view';\nimport { EditorState } from '@codemirror/state';\nexport { EditorState } from '@codemirror/state';\nimport { history, historyKeymap } from '@codemirror/history';\nimport { foldGutter, foldKeymap } from '@codemirror/fold';\nimport { indentOnInput } from '@codemirror/language';\nimport { lineNumbers } from '@codemirror/gutter';\nimport { defaultKeymap } from '@codemirror/commands';\nimport { bracketMatching } from '@codemirror/matchbrackets';\nimport { closeBrackets, closeBracketsKeymap } from '@codemirror/closebrackets';\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\nimport { autocompletion, completionKeymap } from '@codemirror/autocomplete';\nimport { commentKeymap } from '@codemirror/comment';\nimport { rectangularSelection } from '@codemirror/rectangular-selection';\nimport { defaultHighlightStyle } from '@codemirror/highlight';\nimport { lintKeymap } from '@codemirror/lint'; /// This is an extension value that just pulls together a whole lot of\n/// extensions that you might want in a basic editor. It is meant as a\n/// convenient helper to quickly set up CodeMirror without installing\n/// and importing a lot of packages.\n///\n/// Specifically, it includes...\n///\n///  - [the default command bindings](#commands.defaultKeymap)\n///  - [line numbers](#gutter.lineNumbers)\n///  - [special character highlighting](#view.highlightSpecialChars)\n///  - [the undo history](#history.history)\n///  - [a fold gutter](#fold.foldGutter)\n///  - [custom selection drawing](#view.drawSelection)\n///  - [multiple selections](#state.EditorState^allowMultipleSelections)\n///  - [reindentation on input](#language.indentOnInput)\n///  - [the default highlight style](#highlight.defaultHighlightStyle) (as fallback)\n///  - [bracket matching](#matchbrackets.bracketMatching)\n///  - [bracket closing](#closebrackets.closeBrackets)\n///  - [autocompletion](#autocomplete.autocompletion)\n///  - [rectangular selection](#rectangular-selection.rectangularSelection)\n///  - [active line highlighting](#view.highlightActiveLine)\n///  - [selection match highlighting](#search.highlightSelectionMatches)\n///  - [search](#search.searchKeymap)\n///  - [commenting](#comment.commentKeymap)\n///  - [linting](#lint.lintKeymap)\n///\n/// (You'll probably want to add some language package to your setup\n/// too.)\n///\n/// This package does not allow customization. The idea is that, once\n/// you decide you want to configure your editor more precisely, you\n/// take this package's source (which is just a bunch of imports and\n/// an array literal), copy it into your own code, and adjust it as\n/// desired.\n\nconst basicSetup = [lineNumbers(), highlightSpecialChars(), history(), foldGutter(), drawSelection(), EditorState.allowMultipleSelections.of(true), indentOnInput(), defaultHighlightStyle.fallback, bracketMatching(), closeBrackets(), autocompletion(), rectangularSelection(), highlightActiveLine(), highlightSelectionMatches(), keymap.of([...closeBracketsKeymap, ...defaultKeymap, ...searchKeymap, ...historyKeymap, ...foldKeymap, ...commentKeymap, ...completionKeymap, ...lintKeymap])];\nexport { basicSetup };","map":{"version":3,"sources":["D:/MSIT/Practicum - iLMS/editor-codemirror6/node_modules/@codemirror/basic-setup/dist/index.js"],"names":["highlightSpecialChars","drawSelection","highlightActiveLine","keymap","EditorView","EditorState","history","historyKeymap","foldGutter","foldKeymap","indentOnInput","lineNumbers","defaultKeymap","bracketMatching","closeBrackets","closeBracketsKeymap","highlightSelectionMatches","searchKeymap","autocompletion","completionKeymap","commentKeymap","rectangularSelection","defaultHighlightStyle","lintKeymap","basicSetup","allowMultipleSelections","of","fallback"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,aAAhC,EAA+CC,mBAA/C,EAAoEC,MAApE,QAAkF,kBAAlF;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,qBAAvC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,kBAAvC;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,aAAT,EAAwBC,mBAAxB,QAAmD,2BAAnD;AACA,SAASC,yBAAT,EAAoCC,YAApC,QAAwD,oBAAxD;AACA,SAASC,cAAT,EAAyBC,gBAAzB,QAAiD,0BAAjD;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,oBAAT,QAAqC,mCAArC;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,UAAT,QAA2B,kBAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,CACfb,WAAW,EADI,EAEfX,qBAAqB,EAFN,EAGfM,OAAO,EAHQ,EAIfE,UAAU,EAJK,EAKfP,aAAa,EALE,EAMfI,WAAW,CAACoB,uBAAZ,CAAoCC,EAApC,CAAuC,IAAvC,CANe,EAOfhB,aAAa,EAPE,EAQfY,qBAAqB,CAACK,QARP,EASfd,eAAe,EATA,EAUfC,aAAa,EAVE,EAWfI,cAAc,EAXC,EAYfG,oBAAoB,EAZL,EAafnB,mBAAmB,EAbJ,EAcfc,yBAAyB,EAdV,EAefb,MAAM,CAACuB,EAAP,CAAU,CACN,GAAGX,mBADG,EAEN,GAAGH,aAFG,EAGN,GAAGK,YAHG,EAIN,GAAGV,aAJG,EAKN,GAAGE,UALG,EAMN,GAAGW,aANG,EAON,GAAGD,gBAPG,EAQN,GAAGI,UARG,CAAV,CAfe,CAAnB;AA2BA,SAASC,UAAT","sourcesContent":["import { highlightSpecialChars, drawSelection, highlightActiveLine, keymap } from '@codemirror/view';\nexport { EditorView } from '@codemirror/view';\nimport { EditorState } from '@codemirror/state';\nexport { EditorState } from '@codemirror/state';\nimport { history, historyKeymap } from '@codemirror/history';\nimport { foldGutter, foldKeymap } from '@codemirror/fold';\nimport { indentOnInput } from '@codemirror/language';\nimport { lineNumbers } from '@codemirror/gutter';\nimport { defaultKeymap } from '@codemirror/commands';\nimport { bracketMatching } from '@codemirror/matchbrackets';\nimport { closeBrackets, closeBracketsKeymap } from '@codemirror/closebrackets';\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\nimport { autocompletion, completionKeymap } from '@codemirror/autocomplete';\nimport { commentKeymap } from '@codemirror/comment';\nimport { rectangularSelection } from '@codemirror/rectangular-selection';\nimport { defaultHighlightStyle } from '@codemirror/highlight';\nimport { lintKeymap } from '@codemirror/lint';\n\n/// This is an extension value that just pulls together a whole lot of\n/// extensions that you might want in a basic editor. It is meant as a\n/// convenient helper to quickly set up CodeMirror without installing\n/// and importing a lot of packages.\n///\n/// Specifically, it includes...\n///\n///  - [the default command bindings](#commands.defaultKeymap)\n///  - [line numbers](#gutter.lineNumbers)\n///  - [special character highlighting](#view.highlightSpecialChars)\n///  - [the undo history](#history.history)\n///  - [a fold gutter](#fold.foldGutter)\n///  - [custom selection drawing](#view.drawSelection)\n///  - [multiple selections](#state.EditorState^allowMultipleSelections)\n///  - [reindentation on input](#language.indentOnInput)\n///  - [the default highlight style](#highlight.defaultHighlightStyle) (as fallback)\n///  - [bracket matching](#matchbrackets.bracketMatching)\n///  - [bracket closing](#closebrackets.closeBrackets)\n///  - [autocompletion](#autocomplete.autocompletion)\n///  - [rectangular selection](#rectangular-selection.rectangularSelection)\n///  - [active line highlighting](#view.highlightActiveLine)\n///  - [selection match highlighting](#search.highlightSelectionMatches)\n///  - [search](#search.searchKeymap)\n///  - [commenting](#comment.commentKeymap)\n///  - [linting](#lint.lintKeymap)\n///\n/// (You'll probably want to add some language package to your setup\n/// too.)\n///\n/// This package does not allow customization. The idea is that, once\n/// you decide you want to configure your editor more precisely, you\n/// take this package's source (which is just a bunch of imports and\n/// an array literal), copy it into your own code, and adjust it as\n/// desired.\nconst basicSetup = [\n    lineNumbers(),\n    highlightSpecialChars(),\n    history(),\n    foldGutter(),\n    drawSelection(),\n    EditorState.allowMultipleSelections.of(true),\n    indentOnInput(),\n    defaultHighlightStyle.fallback,\n    bracketMatching(),\n    closeBrackets(),\n    autocompletion(),\n    rectangularSelection(),\n    highlightActiveLine(),\n    highlightSelectionMatches(),\n    keymap.of([\n        ...closeBracketsKeymap,\n        ...defaultKeymap,\n        ...searchKeymap,\n        ...historyKeymap,\n        ...foldKeymap,\n        ...commentKeymap,\n        ...completionKeymap,\n        ...lintKeymap\n    ])\n];\n\nexport { basicSetup };\n"]},"metadata":{},"sourceType":"module"}