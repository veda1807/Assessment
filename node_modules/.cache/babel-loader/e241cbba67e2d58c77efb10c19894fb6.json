{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\n\nfunction FetchData({\n  url,\n  initialState = null,\n  skip = false\n}) {\n  _s();\n\n  const [data, setData] = useState(initialState);\n  const [isLoading, setIsLoading] = useState(true);\n  const [reload, setReload] = useState({}); // used to force running the api fetch in effect\n\n  useEffect(() => {\n    let mounted = true;\n\n    if (!skip) {\n      setIsLoading(true);\n      fetch(url).then(res => res.json()).then(result => {\n        mounted && setData(result);\n      }).catch(showError).finally(() => {\n        mounted && setIsLoading(false);\n      });\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [url, reload, skip]);\n\n  const reloadData = () => {\n    setReload({});\n  };\n\n  return {\n    data,\n    setData,\n    isLoading,\n    reloadData\n  };\n}\n\n_s(FetchData, \"YwwHESjMlR87zZXHZCbJCrvHbSU=\");\n\n_c = FetchData;\n;\n\nconst showError = err => {\n  // your custom error display logic\n  alert(err);\n};\n\nexport default FetchData;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchData\");","map":{"version":3,"sources":["D:/MSIT/Practicum - iLMS/AssessmentsSystem/src/utils/FetchData.js"],"names":["React","useEffect","useState","FetchData","url","initialState","skip","data","setData","isLoading","setIsLoading","reload","setReload","mounted","fetch","then","res","json","result","catch","showError","finally","reloadData","err","alert"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AACA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,YAAY,GAAG,IAAtB;AAA4BC,EAAAA,IAAI,GAAG;AAAnC,CAAnB,EAA+D;AAAA;;AAC3D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAACG,YAAD,CAAhC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC,CAH2D,CAGjB;;AAE1CD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,OAAO,GAAG,IAAd;;AAEA,QAAI,CAACP,IAAL,EAAW;AACTI,MAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAI,MAAAA,KAAK,CAACV,GAAD,CAAL,CACGW,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,MAAM,IAAI;AACdL,QAAAA,OAAO,IAAIL,OAAO,CAACU,MAAD,CAAlB;AACD,OAJH,EAKGC,KALH,CAKSC,SALT,EAMGC,OANH,CAMW,MAAM;AACbR,QAAAA,OAAO,IAAIH,YAAY,CAAC,KAAD,CAAvB;AACD,OARH;AASD;;AAED,WAAO,MAAM;AACXG,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GApBQ,EAoBN,CAACT,GAAD,EAAMO,MAAN,EAAcL,IAAd,CApBM,CAAT;;AAsBA,QAAMgB,UAAU,GAAG,MAAM;AACvBV,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAFD;;AAIA,SAAO;AAAEL,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,SAAjB;AAA4Ba,IAAAA;AAA5B,GAAP;AACD;;GAhCMnB,S;;KAAAA,S;AAgCN;;AAED,MAAMiB,SAAS,GAAGG,GAAG,IAAI;AACvB;AACAC,EAAAA,KAAK,CAACD,GAAD,CAAL;AACD,CAHD;;AAKA,eAAepB,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nfunction FetchData({ url, initialState = null, skip = false }) {\r\n    const [data, setData] = useState(initialState);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [reload, setReload] = useState({}); // used to force running the api fetch in effect\r\n  \r\n    useEffect(() => {\r\n      let mounted = true;\r\n  \r\n      if (!skip) {\r\n        setIsLoading(true);\r\n  \r\n        fetch(url)\r\n          .then(res => res.json())\r\n          .then(result => {\r\n            mounted && setData(result);\r\n          })\r\n          .catch(showError)\r\n          .finally(() => {\r\n            mounted && setIsLoading(false);\r\n          });\r\n      }\r\n  \r\n      return () => {\r\n        mounted = false;\r\n      };\r\n    }, [url, reload, skip]);\r\n  \r\n    const reloadData = () => {\r\n      setReload({});\r\n    };\r\n  \r\n    return { data, setData, isLoading, reloadData };\r\n  };\r\n\r\n  const showError = err => {\r\n    // your custom error display logic\r\n    alert(err);\r\n  };\r\n\r\n  export default FetchData;\r\n  "]},"metadata":{},"sourceType":"module"}