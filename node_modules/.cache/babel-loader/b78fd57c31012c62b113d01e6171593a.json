{"ast":null,"code":"import { Text, findClusterBreak } from '@codemirror/text';\nexport { Text } from '@codemirror/text';\nconst DefaultSplit = /\\r\\n?|\\n/;\n/**\nDistinguishes different ways in which positions can be mapped.\n*/\n\nvar MapMode = /*@__PURE__*/function (MapMode) {\n  /**\n  Map a position to a valid new position, even when its context\n  was deleted.\n  */\n  MapMode[MapMode[\"Simple\"] = 0] = \"Simple\";\n  /**\n  Return null if deletion happens across the position.\n  */\n\n  MapMode[MapMode[\"TrackDel\"] = 1] = \"TrackDel\";\n  /**\n  Return null if the character _before_ the position is deleted.\n  */\n\n  MapMode[MapMode[\"TrackBefore\"] = 2] = \"TrackBefore\";\n  /**\n  Return null if the character _after_ the position is deleted.\n  */\n\n  MapMode[MapMode[\"TrackAfter\"] = 3] = \"TrackAfter\";\n  return MapMode;\n}(MapMode || (MapMode = {}));\n/**\nA change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)\nthat doesn't store the inserted text. As such, it can't be\napplied, but is cheaper to store and manipulate.\n*/\n\n\nclass ChangeDesc {\n  // Sections are encoded as pairs of integers. The first is the\n  // length in the current document, and the second is -1 for\n  // unaffected sections, and the length of the replacement content\n  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,\n  // 0), and a replacement two positive numbers.\n\n  /**\n  @internal\n  */\n  constructor(\n  /**\n  @internal\n  */\n  sections) {\n    this.sections = sections;\n  }\n  /**\n  The length of the document before the change.\n  */\n\n\n  get length() {\n    let result = 0;\n\n    for (let i = 0; i < this.sections.length; i += 2) result += this.sections[i];\n\n    return result;\n  }\n  /**\n  The length of the document after the change.\n  */\n\n\n  get newLength() {\n    let result = 0;\n\n    for (let i = 0; i < this.sections.length; i += 2) {\n      let ins = this.sections[i + 1];\n      result += ins < 0 ? this.sections[i] : ins;\n    }\n\n    return result;\n  }\n  /**\n  False when there are actual changes in this set.\n  */\n\n\n  get empty() {\n    return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;\n  }\n  /**\n  Iterate over the unchanged parts left by these changes.\n  */\n\n\n  iterGaps(f) {\n    for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {\n      let len = this.sections[i++],\n          ins = this.sections[i++];\n\n      if (ins < 0) {\n        f(posA, posB, len);\n        posB += len;\n      } else {\n        posB += ins;\n      }\n\n      posA += len;\n    }\n  }\n  /**\n  Iterate over the ranges changed by these changes. (See\n  [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a\n  variant that also provides you with the inserted text.)\n  \n  When `individual` is true, adjacent changes (which are kept\n  separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are\n  reported separately.\n  */\n\n\n  iterChangedRanges(f, individual = false) {\n    iterChanges(this, f, individual);\n  }\n  /**\n  Get a description of the inverted form of these changes.\n  */\n\n\n  get invertedDesc() {\n    let sections = [];\n\n    for (let i = 0; i < this.sections.length;) {\n      let len = this.sections[i++],\n          ins = this.sections[i++];\n      if (ins < 0) sections.push(len, ins);else sections.push(ins, len);\n    }\n\n    return new ChangeDesc(sections);\n  }\n  /**\n  Compute the combined effect of applying another set of changes\n  after this one. The length of the document after this set should\n  match the length before `other`.\n  */\n\n\n  composeDesc(other) {\n    return this.empty ? other : other.empty ? this : composeSets(this, other);\n  }\n  /**\n  Map this description, which should start with the same document\n  as `other`, over another set of changes, so that it can be\n  applied after it. When `before` is true, map as if the changes\n  in `other` happened before the ones in `this`.\n  */\n\n\n  mapDesc(other, before = false) {\n    return other.empty ? this : mapSet(this, other, before);\n  }\n\n  mapPos(pos, assoc = -1, mode = MapMode.Simple) {\n    let posA = 0,\n        posB = 0;\n\n    for (let i = 0; i < this.sections.length;) {\n      let len = this.sections[i++],\n          ins = this.sections[i++],\n          endA = posA + len;\n\n      if (ins < 0) {\n        if (endA > pos) return posB + (pos - posA);\n        posB += len;\n      } else {\n        if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;\n        if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;\n        posB += ins;\n      }\n\n      posA = endA;\n    }\n\n    if (pos > posA) throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);\n    return posB;\n  }\n  /**\n  Check whether these changes touch a given range. When one of the\n  changes entirely covers the range, the string `\"cover\"` is\n  returned.\n  */\n\n\n  touchesRange(from, to = from) {\n    for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {\n      let len = this.sections[i++],\n          ins = this.sections[i++],\n          end = pos + len;\n      if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? \"cover\" : true;\n      pos = end;\n    }\n\n    return false;\n  }\n  /**\n  @internal\n  */\n\n\n  toString() {\n    let result = \"\";\n\n    for (let i = 0; i < this.sections.length;) {\n      let len = this.sections[i++],\n          ins = this.sections[i++];\n      result += (result ? \" \" : \"\") + len + (ins >= 0 ? \":\" + ins : \"\");\n    }\n\n    return result;\n  }\n  /**\n  Serialize this change desc to a JSON-representable value.\n  */\n\n\n  toJSON() {\n    return this.sections;\n  }\n  /**\n  Create a change desc from its JSON representation (as produced\n  by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).\n  */\n\n\n  static fromJSON(json) {\n    if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != \"number\")) throw new RangeError(\"Invalid JSON representation of ChangeDesc\");\n    return new ChangeDesc(json);\n  }\n\n}\n/**\nA change set represents a group of modifications to a document. It\nstores the document length, and can only be applied to documents\nwith exactly that length.\n*/\n\n\nclass ChangeSet extends ChangeDesc {\n  /**\n  @internal\n  */\n  constructor(sections,\n  /**\n  @internal\n  */\n  inserted) {\n    super(sections);\n    this.inserted = inserted;\n  }\n  /**\n  Apply the changes to a document, returning the modified\n  document.\n  */\n\n\n  apply(doc) {\n    if (this.length != doc.length) throw new RangeError(\"Applying change set to a document with the wrong length\");\n    iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);\n    return doc;\n  }\n\n  mapDesc(other, before = false) {\n    return mapSet(this, other, before, true);\n  }\n  /**\n  Given the document as it existed _before_ the changes, return a\n  change set that represents the inverse of this set, which could\n  be used to go from the document created by the changes back to\n  the document as it existed before the changes.\n  */\n\n\n  invert(doc) {\n    let sections = this.sections.slice(),\n        inserted = [];\n\n    for (let i = 0, pos = 0; i < sections.length; i += 2) {\n      let len = sections[i],\n          ins = sections[i + 1];\n\n      if (ins >= 0) {\n        sections[i] = ins;\n        sections[i + 1] = len;\n        let index = i >> 1;\n\n        while (inserted.length < index) inserted.push(Text.empty);\n\n        inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);\n      }\n\n      pos += len;\n    }\n\n    return new ChangeSet(sections, inserted);\n  }\n  /**\n  Combine two subsequent change sets into a single set. `other`\n  must start in the document produced by `this`. If `this` goes\n  `docA` → `docB` and `other` represents `docB` → `docC`, the\n  returned value will represent the change `docA` → `docC`.\n  */\n\n\n  compose(other) {\n    return this.empty ? other : other.empty ? this : composeSets(this, other, true);\n  }\n  /**\n  Given another change set starting in the same document, maps this\n  change set over the other, producing a new change set that can be\n  applied to the document produced by applying `other`. When\n  `before` is `true`, order changes as if `this` comes before\n  `other`, otherwise (the default) treat `other` as coming first.\n  \n  Given two changes `A` and `B`, `A.compose(B.map(A))` and\n  `B.compose(A.map(B, true))` will produce the same document. This\n  provides a basic form of [operational\n  transformation](https://en.wikipedia.org/wiki/Operational_transformation),\n  and can be used for collaborative editing.\n  */\n\n\n  map(other, before = false) {\n    return other.empty ? this : mapSet(this, other, before, true);\n  }\n  /**\n  Iterate over the changed ranges in the document, calling `f` for\n  each.\n  \n  When `individual` is true, adjacent changes are reported\n  separately.\n  */\n\n\n  iterChanges(f, individual = false) {\n    iterChanges(this, f, individual);\n  }\n  /**\n  Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change\n  set.\n  */\n\n\n  get desc() {\n    return new ChangeDesc(this.sections);\n  }\n  /**\n  @internal\n  */\n\n\n  filter(ranges) {\n    let resultSections = [],\n        resultInserted = [],\n        filteredSections = [];\n    let iter = new SectionIter(this);\n\n    done: for (let i = 0, pos = 0;;) {\n      let next = i == ranges.length ? 1e9 : ranges[i++];\n\n      while (pos < next || pos == next && iter.len == 0) {\n        if (iter.done) break done;\n        let len = Math.min(iter.len, next - pos);\n        addSection(filteredSections, len, -1);\n        let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;\n        addSection(resultSections, len, ins);\n        if (ins > 0) addInsert(resultInserted, resultSections, iter.text);\n        iter.forward(len);\n        pos += len;\n      }\n\n      let end = ranges[i++];\n\n      while (pos < end) {\n        if (iter.done) break done;\n        let len = Math.min(iter.len, end - pos);\n        addSection(resultSections, len, -1);\n        addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);\n        iter.forward(len);\n        pos += len;\n      }\n    }\n\n    return {\n      changes: new ChangeSet(resultSections, resultInserted),\n      filtered: new ChangeDesc(filteredSections)\n    };\n  }\n  /**\n  Serialize this change set to a JSON-representable value.\n  */\n\n\n  toJSON() {\n    let parts = [];\n\n    for (let i = 0; i < this.sections.length; i += 2) {\n      let len = this.sections[i],\n          ins = this.sections[i + 1];\n      if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[i >> 1].toJSON()));\n    }\n\n    return parts;\n  }\n  /**\n  Create a change set for the given changes, for a document of the\n  given length, using `lineSep` as line separator.\n  */\n\n\n  static of(changes, length, lineSep) {\n    let sections = [],\n        inserted = [],\n        pos = 0;\n    let total = null;\n\n    function flush(force = false) {\n      if (!force && !sections.length) return;\n      if (pos < length) addSection(sections, length - pos, -1);\n      let set = new ChangeSet(sections, inserted);\n      total = total ? total.compose(set.map(total)) : set;\n      sections = [];\n      inserted = [];\n      pos = 0;\n    }\n\n    function process(spec) {\n      if (Array.isArray(spec)) {\n        for (let sub of spec) process(sub);\n      } else if (spec instanceof ChangeSet) {\n        if (spec.length != length) throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);\n        flush();\n        total = total ? total.compose(spec.map(total)) : spec;\n      } else {\n        let {\n          from,\n          to = from,\n          insert\n        } = spec;\n        if (from > to || from < 0 || to > length) throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);\n        let insText = !insert ? Text.empty : typeof insert == \"string\" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;\n        let insLen = insText.length;\n        if (from == to && insLen == 0) return;\n        if (from < pos) flush();\n        if (from > pos) addSection(sections, from - pos, -1);\n        addSection(sections, to - from, insLen);\n        addInsert(inserted, sections, insText);\n        pos = to;\n      }\n    }\n\n    process(changes);\n    flush(!total);\n    return total;\n  }\n  /**\n  Create an empty changeset of the given length.\n  */\n\n\n  static empty(length) {\n    return new ChangeSet(length ? [length, -1] : [], []);\n  }\n  /**\n  Create a changeset from its JSON representation (as produced by\n  [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).\n  */\n\n\n  static fromJSON(json) {\n    if (!Array.isArray(json)) throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n    let sections = [],\n        inserted = [];\n\n    for (let i = 0; i < json.length; i++) {\n      let part = json[i];\n\n      if (typeof part == \"number\") {\n        sections.push(part, -1);\n      } else if (!Array.isArray(part) || typeof part[0] != \"number\" || part.some((e, i) => i && typeof e != \"string\")) {\n        throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n      } else if (part.length == 1) {\n        sections.push(part[0], 0);\n      } else {\n        while (inserted.length < i) inserted.push(Text.empty);\n\n        inserted[i] = Text.of(part.slice(1));\n        sections.push(part[0], inserted[i].length);\n      }\n    }\n\n    return new ChangeSet(sections, inserted);\n  }\n\n}\n\nfunction addSection(sections, len, ins, forceJoin = false) {\n  if (len == 0 && ins <= 0) return;\n  let last = sections.length - 2;\n  if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {\n    sections[last] += len;\n    sections[last + 1] += ins;\n  } else sections.push(len, ins);\n}\n\nfunction addInsert(values, sections, value) {\n  if (value.length == 0) return;\n  let index = sections.length - 2 >> 1;\n\n  if (index < values.length) {\n    values[values.length - 1] = values[values.length - 1].append(value);\n  } else {\n    while (values.length < index) values.push(Text.empty);\n\n    values.push(value);\n  }\n}\n\nfunction iterChanges(desc, f, individual) {\n  let inserted = desc.inserted;\n\n  for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {\n    let len = desc.sections[i++],\n        ins = desc.sections[i++];\n\n    if (ins < 0) {\n      posA += len;\n      posB += len;\n    } else {\n      let endA = posA,\n          endB = posB,\n          text = Text.empty;\n\n      for (;;) {\n        endA += len;\n        endB += ins;\n        if (ins && inserted) text = text.append(inserted[i - 2 >> 1]);\n        if (individual || i == desc.sections.length || desc.sections[i + 1] < 0) break;\n        len = desc.sections[i++];\n        ins = desc.sections[i++];\n      }\n\n      f(posA, endA, posB, endB, text);\n      posA = endA;\n      posB = endB;\n    }\n  }\n}\n\nfunction mapSet(setA, setB, before, mkSet = false) {\n  let sections = [],\n      insert = mkSet ? [] : null;\n  let a = new SectionIter(setA),\n      b = new SectionIter(setB);\n\n  for (let posA = 0, posB = 0;;) {\n    if (a.ins == -1) {\n      posA += a.len;\n      a.next();\n    } else if (b.ins == -1 && posB < posA) {\n      let skip = Math.min(b.len, posA - posB);\n      b.forward(skip);\n      addSection(sections, skip, -1);\n      posB += skip;\n    } else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {\n      addSection(sections, b.ins, -1);\n\n      while (posA > posB && !a.done && posA + a.len < posB + b.len) {\n        posA += a.len;\n        a.next();\n      }\n\n      posB += b.len;\n      b.next();\n    } else if (a.ins >= 0) {\n      let len = 0,\n          end = posA + a.len;\n\n      for (;;) {\n        if (b.ins >= 0 && posB > posA && posB + b.len < end) {\n          len += b.ins;\n          posB += b.len;\n          b.next();\n        } else if (b.ins == -1 && posB < end) {\n          let skip = Math.min(b.len, end - posB);\n          len += skip;\n          b.forward(skip);\n          posB += skip;\n        } else {\n          break;\n        }\n      }\n\n      addSection(sections, len, a.ins);\n      if (insert) addInsert(insert, sections, a.text);\n      posA = end;\n      a.next();\n    } else if (a.done && b.done) {\n      return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);\n    } else {\n      throw new Error(\"Mismatched change set lengths\");\n    }\n  }\n}\n\nfunction composeSets(setA, setB, mkSet = false) {\n  let sections = [];\n  let insert = mkSet ? [] : null;\n  let a = new SectionIter(setA),\n      b = new SectionIter(setB);\n\n  for (let open = false;;) {\n    if (a.done && b.done) {\n      return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);\n    } else if (a.ins == 0) {\n      // Deletion in A\n      addSection(sections, a.len, 0, open);\n      a.next();\n    } else if (b.len == 0 && !b.done) {\n      // Insertion in B\n      addSection(sections, 0, b.ins, open);\n      if (insert) addInsert(insert, sections, b.text);\n      b.next();\n    } else if (a.done || b.done) {\n      throw new Error(\"Mismatched change set lengths\");\n    } else {\n      let len = Math.min(a.len2, b.len),\n          sectionLen = sections.length;\n\n      if (a.ins == -1) {\n        let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;\n        addSection(sections, len, insB, open);\n        if (insert && insB) addInsert(insert, sections, b.text);\n      } else if (b.ins == -1) {\n        addSection(sections, a.off ? 0 : a.len, len, open);\n        if (insert) addInsert(insert, sections, a.textBit(len));\n      } else {\n        addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);\n        if (insert && !b.off) addInsert(insert, sections, b.text);\n      }\n\n      open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);\n      a.forward2(len);\n      b.forward(len);\n    }\n  }\n}\n\nclass SectionIter {\n  constructor(set) {\n    this.set = set;\n    this.i = 0;\n    this.next();\n  }\n\n  next() {\n    let {\n      sections\n    } = this.set;\n\n    if (this.i < sections.length) {\n      this.len = sections[this.i++];\n      this.ins = sections[this.i++];\n    } else {\n      this.len = 0;\n      this.ins = -2;\n    }\n\n    this.off = 0;\n  }\n\n  get done() {\n    return this.ins == -2;\n  }\n\n  get len2() {\n    return this.ins < 0 ? this.len : this.ins;\n  }\n\n  get text() {\n    let {\n      inserted\n    } = this.set,\n        index = this.i - 2 >> 1;\n    return index >= inserted.length ? Text.empty : inserted[index];\n  }\n\n  textBit(len) {\n    let {\n      inserted\n    } = this.set,\n        index = this.i - 2 >> 1;\n    return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);\n  }\n\n  forward(len) {\n    if (len == this.len) this.next();else {\n      this.len -= len;\n      this.off += len;\n    }\n  }\n\n  forward2(len) {\n    if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {\n      this.ins -= len;\n      this.off += len;\n    }\n  }\n\n}\n/**\nA single selection range. When\n[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\nis enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold\nmultiple ranges. By default, selections hold exactly one range.\n*/\n\n\nclass SelectionRange {\n  /**\n  @internal\n  */\n  constructor(\n  /**\n  The lower boundary of the range.\n  */\n  from,\n  /**\n  The upper boundary of the range.\n  */\n  to, flags) {\n    this.from = from;\n    this.to = to;\n    this.flags = flags;\n  }\n  /**\n  The anchor of the range—the side that doesn't move when you\n  extend it.\n  */\n\n\n  get anchor() {\n    return this.flags & 16\n    /* Inverted */\n    ? this.to : this.from;\n  }\n  /**\n  The head of the range, which is moved when the range is\n  [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).\n  */\n\n\n  get head() {\n    return this.flags & 16\n    /* Inverted */\n    ? this.from : this.to;\n  }\n  /**\n  True when `anchor` and `head` are at the same position.\n  */\n\n\n  get empty() {\n    return this.from == this.to;\n  }\n  /**\n  If this is a cursor that is explicitly associated with the\n  character on one of its sides, this returns the side. -1 means\n  the character before its position, 1 the character after, and 0\n  means no association.\n  */\n\n\n  get assoc() {\n    return this.flags & 4\n    /* AssocBefore */\n    ? -1 : this.flags & 8\n    /* AssocAfter */\n    ? 1 : 0;\n  }\n  /**\n  The bidirectional text level associated with this cursor, if\n  any.\n  */\n\n\n  get bidiLevel() {\n    let level = this.flags & 3\n    /* BidiLevelMask */\n    ;\n    return level == 3 ? null : level;\n  }\n  /**\n  The goal column (stored vertical offset) associated with a\n  cursor. This is used to preserve the vertical position when\n  [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across\n  lines of different length.\n  */\n\n\n  get goalColumn() {\n    let value = this.flags >> 5\n    /* GoalColumnOffset */\n    ;\n    return value == 33554431\n    /* NoGoalColumn */\n    ? undefined : value;\n  }\n  /**\n  Map this range through a change, producing a valid range in the\n  updated document.\n  */\n\n\n  map(change, assoc = -1) {\n    let from = change.mapPos(this.from, assoc),\n        to = change.mapPos(this.to, assoc);\n    return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);\n  }\n  /**\n  Extend this range to cover at least `from` to `to`.\n  */\n\n\n  extend(from, to = from) {\n    if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);\n    let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;\n    return EditorSelection.range(this.anchor, head);\n  }\n  /**\n  Compare this range to another range.\n  */\n\n\n  eq(other) {\n    return this.anchor == other.anchor && this.head == other.head;\n  }\n  /**\n  Return a JSON-serializable object representing the range.\n  */\n\n\n  toJSON() {\n    return {\n      anchor: this.anchor,\n      head: this.head\n    };\n  }\n  /**\n  Convert a JSON representation of a range to a `SelectionRange`\n  instance.\n  */\n\n\n  static fromJSON(json) {\n    if (!json || typeof json.anchor != \"number\" || typeof json.head != \"number\") throw new RangeError(\"Invalid JSON representation for SelectionRange\");\n    return EditorSelection.range(json.anchor, json.head);\n  }\n\n}\n/**\nAn editor selection holds one or more selection ranges.\n*/\n\n\nclass EditorSelection {\n  /**\n  @internal\n  */\n  constructor(\n  /**\n  The ranges in the selection, sorted by position. Ranges cannot\n  overlap (but they may touch, if they aren't empty).\n  */\n  ranges,\n  /**\n  The index of the _main_ range in the selection (which is\n  usually the range that was added last).\n  */\n  mainIndex = 0) {\n    this.ranges = ranges;\n    this.mainIndex = mainIndex;\n  }\n  /**\n  Map a selection through a change. Used to adjust the selection\n  position for changes.\n  */\n\n\n  map(change, assoc = -1) {\n    if (change.empty) return this;\n    return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);\n  }\n  /**\n  Compare this selection to another selection.\n  */\n\n\n  eq(other) {\n    if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;\n\n    for (let i = 0; i < this.ranges.length; i++) if (!this.ranges[i].eq(other.ranges[i])) return false;\n\n    return true;\n  }\n  /**\n  Get the primary selection range. Usually, you should make sure\n  your code applies to _all_ ranges, by using methods like\n  [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).\n  */\n\n\n  get main() {\n    return this.ranges[this.mainIndex];\n  }\n  /**\n  Make sure the selection only has one range. Returns a selection\n  holding only the main range from this selection.\n  */\n\n\n  asSingle() {\n    return this.ranges.length == 1 ? this : new EditorSelection([this.main]);\n  }\n  /**\n  Extend this selection with an extra range.\n  */\n\n\n  addRange(range, main = true) {\n    return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);\n  }\n  /**\n  Replace a given range with another range, and then normalize the\n  selection to merge and sort ranges if necessary.\n  */\n\n\n  replaceRange(range, which = this.mainIndex) {\n    let ranges = this.ranges.slice();\n    ranges[which] = range;\n    return EditorSelection.create(ranges, this.mainIndex);\n  }\n  /**\n  Convert this selection to an object that can be serialized to\n  JSON.\n  */\n\n\n  toJSON() {\n    return {\n      ranges: this.ranges.map(r => r.toJSON()),\n      main: this.mainIndex\n    };\n  }\n  /**\n  Create a selection from a JSON representation.\n  */\n\n\n  static fromJSON(json) {\n    if (!json || !Array.isArray(json.ranges) || typeof json.main != \"number\" || json.main >= json.ranges.length) throw new RangeError(\"Invalid JSON representation for EditorSelection\");\n    return new EditorSelection(json.ranges.map(r => SelectionRange.fromJSON(r)), json.main);\n  }\n  /**\n  Create a selection holding a single range.\n  */\n\n\n  static single(anchor, head = anchor) {\n    return new EditorSelection([EditorSelection.range(anchor, head)], 0);\n  }\n  /**\n  Sort and merge the given set of ranges, creating a valid\n  selection.\n  */\n\n\n  static create(ranges, mainIndex = 0) {\n    if (ranges.length == 0) throw new RangeError(\"A selection needs at least one range\");\n\n    for (let pos = 0, i = 0; i < ranges.length; i++) {\n      let range = ranges[i];\n      if (range.empty ? range.from <= pos : range.from < pos) return normalized(ranges.slice(), mainIndex);\n      pos = range.to;\n    }\n\n    return new EditorSelection(ranges, mainIndex);\n  }\n  /**\n  Create a cursor selection range at the given position. You can\n  safely ignore the optional arguments in most situations.\n  */\n\n\n  static cursor(pos, assoc = 0, bidiLevel, goalColumn) {\n    return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4\n    /* AssocBefore */\n    : 8\n    /* AssocAfter */\n    ) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431\n    /* NoGoalColumn */\n    ) << 5\n    /* GoalColumnOffset */\n    );\n  }\n  /**\n  Create a selection range.\n  */\n\n\n  static range(anchor, head, goalColumn) {\n    let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431\n    /* NoGoalColumn */\n    ) << 5\n    /* GoalColumnOffset */\n    ;\n    return head < anchor ? new SelectionRange(head, anchor, 16\n    /* Inverted */\n    | goal) : new SelectionRange(anchor, head, goal);\n  }\n\n}\n\nfunction normalized(ranges, mainIndex = 0) {\n  let main = ranges[mainIndex];\n  ranges.sort((a, b) => a.from - b.from);\n  mainIndex = ranges.indexOf(main);\n\n  for (let i = 1; i < ranges.length; i++) {\n    let range = ranges[i],\n        prev = ranges[i - 1];\n\n    if (range.empty ? range.from <= prev.to : range.from < prev.to) {\n      let from = prev.from,\n          to = Math.max(range.to, prev.to);\n      if (i <= mainIndex) mainIndex--;\n      ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));\n    }\n  }\n\n  return new EditorSelection(ranges, mainIndex);\n}\n\nfunction checkSelection(selection, docLength) {\n  for (let range of selection.ranges) if (range.to > docLength) throw new RangeError(\"Selection points outside of document\");\n}\n\nlet nextID = 0;\n/**\nA facet is a labeled value that is associated with an editor\nstate. It takes inputs from any number of extensions, and combines\nthose into a single output value.\n\nExamples of facets are the [theme](https://codemirror.net/6/docs/ref/#view.EditorView^theme) styles\nassociated with an editor or the [tab\nsize](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) (which is reduced to a single\nvalue, using the input with the hightest precedence).\n*/\n\nclass Facet {\n  constructor(\n  /**\n  @internal\n  */\n  combine,\n  /**\n  @internal\n  */\n  compareInput,\n  /**\n  @internal\n  */\n  compare, isStatic,\n  /**\n  @internal\n  */\n  extensions) {\n    this.combine = combine;\n    this.compareInput = compareInput;\n    this.compare = compare;\n    this.isStatic = isStatic;\n    this.extensions = extensions;\n    /**\n    @internal\n    */\n\n    this.id = nextID++;\n    this.default = combine([]);\n  }\n  /**\n  Define a new facet.\n  */\n\n\n  static define(config = {}) {\n    return new Facet(config.combine || (a => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);\n  }\n  /**\n  Returns an extension that adds the given value for this facet.\n  */\n\n\n  of(value) {\n    return new FacetProvider([], this, 0\n    /* Static */\n    , value);\n  }\n  /**\n  Create an extension that computes a value for the facet from a\n  state. You must take care to declare the parts of the state that\n  this value depends on, since your function is only called again\n  for a new state when one of those parts changed.\n  \n  In most cases, you'll want to use the\n  [`provide`](https://codemirror.net/6/docs/ref/#state.StateField^define^config.provide) option when\n  defining a field instead.\n  */\n\n\n  compute(deps, get) {\n    if (this.isStatic) throw new Error(\"Can't compute a static facet\");\n    return new FacetProvider(deps, this, 1\n    /* Single */\n    , get);\n  }\n  /**\n  Create an extension that computes zero or more values for this\n  facet from a state.\n  */\n\n\n  computeN(deps, get) {\n    if (this.isStatic) throw new Error(\"Can't compute a static facet\");\n    return new FacetProvider(deps, this, 2\n    /* Multi */\n    , get);\n  }\n\n  from(field, get) {\n    if (!get) get = x => x;\n    return this.compute([field], state => get(state.field(field)));\n  }\n\n}\n\nfunction sameArray(a, b) {\n  return a == b || a.length == b.length && a.every((e, i) => e === b[i]);\n}\n\nclass FacetProvider {\n  constructor(dependencies, facet, type, value) {\n    this.dependencies = dependencies;\n    this.facet = facet;\n    this.type = type;\n    this.value = value;\n    this.id = nextID++;\n  }\n\n  dynamicSlot(addresses) {\n    var _a;\n\n    let getter = this.value;\n    let compare = this.facet.compareInput;\n    let idx = addresses[this.id] >> 1,\n        multi = this.type == 2\n    /* Multi */\n    ;\n    let depDoc = false,\n        depSel = false,\n        depAddrs = [];\n\n    for (let dep of this.dependencies) {\n      if (dep == \"doc\") depDoc = true;else if (dep == \"selection\") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);\n    }\n\n    return (state, tr) => {\n      if (!tr || tr.reconfigured) {\n        state.values[idx] = getter(state);\n        return 1\n        /* Changed */\n        ;\n      } else {\n        let depChanged = depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || depAddrs.some(addr => (ensureAddr(state, addr) & 1\n        /* Changed */\n        ) > 0);\n        if (!depChanged) return 0;\n        let newVal = getter(state),\n            oldVal = tr.startState.values[idx];\n        if (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal)) return 0;\n        state.values[idx] = newVal;\n        return 1\n        /* Changed */\n        ;\n      }\n    };\n  }\n\n}\n\nfunction compareArray(a, b, compare) {\n  if (a.length != b.length) return false;\n\n  for (let i = 0; i < a.length; i++) if (!compare(a[i], b[i])) return false;\n\n  return true;\n}\n\nfunction dynamicFacetSlot(addresses, facet, providers) {\n  let providerAddrs = providers.map(p => addresses[p.id]);\n  let providerTypes = providers.map(p => p.type);\n  let dynamic = providerAddrs.filter(p => !(p & 1));\n  let idx = addresses[facet.id] >> 1;\n  return (state, tr) => {\n    let oldAddr = !tr ? null : tr.reconfigured ? tr.startState.config.address[facet.id] : idx << 1;\n    let changed = oldAddr == null;\n\n    for (let dynAddr of dynamic) {\n      if (ensureAddr(state, dynAddr) & 1\n      /* Changed */\n      ) changed = true;\n    }\n\n    if (!changed) return 0;\n    let values = [];\n\n    for (let i = 0; i < providerAddrs.length; i++) {\n      let value = getAddr(state, providerAddrs[i]);\n      if (providerTypes[i] == 2\n      /* Multi */\n      ) for (let val of value) values.push(val);else values.push(value);\n    }\n\n    let newVal = facet.combine(values);\n    if (oldAddr != null && facet.compare(newVal, getAddr(tr.startState, oldAddr))) return 0;\n    state.values[idx] = newVal;\n    return 1\n    /* Changed */\n    ;\n  };\n}\n\nfunction maybeIndex(state, id) {\n  let found = state.config.address[id];\n  return found == null ? null : found >> 1;\n}\n\nconst initField = /*@__PURE__*/Facet.define({\n  static: true\n});\n/**\nFields can store additional information in an editor state, and\nkeep it in sync with the rest of the state.\n*/\n\nclass StateField {\n  constructor(\n  /**\n  @internal\n  */\n  id, createF, updateF, compareF,\n  /**\n  @internal\n  */\n  spec) {\n    this.id = id;\n    this.createF = createF;\n    this.updateF = updateF;\n    this.compareF = compareF;\n    this.spec = spec;\n    /**\n    @internal\n    */\n\n    this.provides = undefined;\n  }\n  /**\n  Define a state field.\n  */\n\n\n  static define(config) {\n    let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);\n    if (config.provide) field.provides = config.provide(field);\n    return field;\n  }\n\n  create(state) {\n    let init = state.facet(initField).find(i => i.field == this);\n    return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);\n  }\n  /**\n  @internal\n  */\n\n\n  slot(addresses) {\n    let idx = addresses[this.id] >> 1;\n    return (state, tr) => {\n      if (!tr || tr.reconfigured && maybeIndex(tr.startState, this.id) == null) {\n        state.values[idx] = this.create(state);\n        return 1\n        /* Changed */\n        ;\n      }\n\n      let oldVal,\n          changed = 0;\n\n      if (tr.reconfigured) {\n        oldVal = tr.startState.values[maybeIndex(tr.startState, this.id)];\n        changed = 1\n        /* Changed */\n        ;\n      } else {\n        oldVal = tr.startState.values[idx];\n      }\n\n      let value = this.updateF(oldVal, tr);\n      if (!changed && !this.compareF(oldVal, value)) changed = 1\n      /* Changed */\n      ;\n      if (changed) state.values[idx] = value;\n      return changed;\n    };\n  }\n  /**\n  Returns an extension that enables this field and overrides the\n  way it is initialized. Can be useful when you need to provide a\n  non-default starting value for the field.\n  */\n\n\n  init(create) {\n    return [this, initField.of({\n      field: this,\n      create\n    })];\n  }\n  /**\n  State field instances can be used as\n  [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a\n  given state.\n  */\n\n\n  get extension() {\n    return this;\n  }\n\n}\n\nconst Prec_ = {\n  fallback: 3,\n  default: 2,\n  extend: 1,\n  override: 0\n};\n\nfunction prec(value) {\n  return ext => new PrecExtension(ext, value);\n}\n/**\nBy default extensions are registered in the order they are found\nin the flattened form of nested array that was provided.\nIndividual extension values can be assigned a precedence to\noverride this. Extensions that do not have a precedence set get\nthe precedence of the nearest parent with a precedence, or\n[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The\nfinal ordering of extensions is determined by first sorting by\nprecedence and then by order within each precedence.\n*/\n\n\nconst Prec = {\n  /**\n  A precedence below the default precedence, which will cause\n  default-precedence extensions to override it even if they are\n  specified later in the extension ordering.\n  */\n  fallback: /*@__PURE__*/prec(Prec_.fallback),\n\n  /**\n  The regular default precedence.\n  */\n  default: /*@__PURE__*/prec(Prec_.default),\n\n  /**\n  A higher-than-default precedence.\n  */\n  extend: /*@__PURE__*/prec(Prec_.extend),\n\n  /**\n  Precedence above the `default` and `extend` precedences.\n  */\n  override: /*@__PURE__*/prec(Prec_.override)\n};\n\nclass PrecExtension {\n  constructor(inner, prec) {\n    this.inner = inner;\n    this.prec = prec;\n  }\n\n}\n/**\nExtension compartments can be used to make a configuration\ndynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your\nconfiguration in a compartment, you can later\n[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a\ntransaction.\n*/\n\n\nclass Compartment {\n  /**\n  Create an instance of this compartment to add to your [state\n  configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).\n  */\n  of(ext) {\n    return new CompartmentInstance(this, ext);\n  }\n  /**\n  Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that\n  reconfigures this compartment.\n  */\n\n\n  reconfigure(content) {\n    return Compartment.reconfigure.of({\n      compartment: this,\n      extension: content\n    });\n  }\n  /**\n  Get the current content of the compartment in the state, or\n  `undefined` if it isn't present.\n  */\n\n\n  get(state) {\n    return state.config.compartments.get(this);\n  }\n\n}\n\nclass CompartmentInstance {\n  constructor(compartment, inner) {\n    this.compartment = compartment;\n    this.inner = inner;\n  }\n\n}\n\nclass Configuration {\n  constructor(base, compartments, dynamicSlots, address, staticValues) {\n    this.base = base;\n    this.compartments = compartments;\n    this.dynamicSlots = dynamicSlots;\n    this.address = address;\n    this.staticValues = staticValues;\n    this.statusTemplate = [];\n\n    while (this.statusTemplate.length < dynamicSlots.length) this.statusTemplate.push(0\n    /* Uninitialized */\n    );\n  }\n\n  staticFacet(facet) {\n    let addr = this.address[facet.id];\n    return addr == null ? facet.default : this.staticValues[addr >> 1];\n  }\n\n  static resolve(base, compartments, oldState) {\n    let fields = [];\n    let facets = Object.create(null);\n    let newCompartments = new Map();\n\n    for (let ext of flatten(base, compartments, newCompartments)) {\n      if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);\n    }\n\n    let address = Object.create(null);\n    let staticValues = [];\n    let dynamicSlots = [];\n\n    for (let field of fields) {\n      address[field.id] = dynamicSlots.length << 1;\n      dynamicSlots.push(a => field.slot(a));\n    }\n\n    for (let id in facets) {\n      let providers = facets[id],\n          facet = providers[0].facet;\n\n      if (providers.every(p => p.type == 0\n      /* Static */\n      )) {\n        address[facet.id] = staticValues.length << 1 | 1;\n        let value = facet.combine(providers.map(p => p.value));\n        let oldAddr = oldState ? oldState.config.address[facet.id] : null;\n\n        if (oldAddr != null) {\n          let oldVal = getAddr(oldState, oldAddr);\n          if (facet.compare(value, oldVal)) value = oldVal;\n        }\n\n        staticValues.push(value);\n      } else {\n        for (let p of providers) {\n          if (p.type == 0\n          /* Static */\n          ) {\n              address[p.id] = staticValues.length << 1 | 1;\n              staticValues.push(p.value);\n            } else {\n            address[p.id] = dynamicSlots.length << 1;\n            dynamicSlots.push(a => p.dynamicSlot(a));\n          }\n        }\n\n        address[facet.id] = dynamicSlots.length << 1;\n        dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));\n      }\n    }\n\n    return new Configuration(base, newCompartments, dynamicSlots.map(f => f(address)), address, staticValues);\n  }\n\n}\n\nfunction flatten(extension, compartments, newCompartments) {\n  let result = [[], [], [], []];\n  let seen = new Map();\n\n  function inner(ext, prec) {\n    let known = seen.get(ext);\n\n    if (known != null) {\n      if (known >= prec) return;\n      let found = result[known].indexOf(ext);\n      if (found > -1) result[known].splice(found, 1);\n      if (ext instanceof CompartmentInstance) newCompartments.delete(ext.compartment);\n    }\n\n    seen.set(ext, prec);\n\n    if (Array.isArray(ext)) {\n      for (let e of ext) inner(e, prec);\n    } else if (ext instanceof CompartmentInstance) {\n      if (newCompartments.has(ext.compartment)) throw new RangeError(`Duplicate use of compartment in extensions`);\n      let content = compartments.get(ext.compartment) || ext.inner;\n      newCompartments.set(ext.compartment, content);\n      inner(content, prec);\n    } else if (ext instanceof PrecExtension) {\n      inner(ext.inner, ext.prec);\n    } else if (ext instanceof StateField) {\n      result[prec].push(ext);\n      if (ext.provides) inner(ext.provides, prec);\n    } else if (ext instanceof FacetProvider) {\n      result[prec].push(ext);\n      if (ext.facet.extensions) inner(ext.facet.extensions, prec);\n    } else {\n      let content = ext.extension;\n      if (!content) throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);\n      inner(content, prec);\n    }\n  }\n\n  inner(extension, Prec_.default);\n  return result.reduce((a, b) => a.concat(b));\n}\n\nfunction ensureAddr(state, addr) {\n  if (addr & 1) return 2\n  /* Computed */\n  ;\n  let idx = addr >> 1;\n  let status = state.status[idx];\n  if (status == 4\n  /* Computing */\n  ) throw new Error(\"Cyclic dependency between fields and/or facets\");\n  if (status & 2\n  /* Computed */\n  ) return status;\n  state.status[idx] = 4\n  /* Computing */\n  ;\n  let changed = state.config.dynamicSlots[idx](state, state.applying);\n  return state.status[idx] = 2\n  /* Computed */\n  | changed;\n}\n\nfunction getAddr(state, addr) {\n  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];\n}\n\nconst languageData = /*@__PURE__*/Facet.define();\nconst allowMultipleSelections = /*@__PURE__*/Facet.define({\n  combine: values => values.some(v => v),\n  static: true\n});\nconst lineSeparator = /*@__PURE__*/Facet.define({\n  combine: values => values.length ? values[0] : undefined,\n  static: true\n});\nconst changeFilter = /*@__PURE__*/Facet.define();\nconst transactionFilter = /*@__PURE__*/Facet.define();\nconst transactionExtender = /*@__PURE__*/Facet.define();\n/**\nAnnotations are tagged values that are used to add metadata to\ntransactions in an extensible way. They should be used to model\nthings that effect the entire transaction (such as its [time\nstamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its\n[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen\n_alongside_ the other changes made by the transaction, [state\neffects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.\n*/\n\nclass Annotation {\n  /**\n  @internal\n  */\n  constructor(\n  /**\n  The annotation type.\n  */\n  type,\n  /**\n  The value of this annotation.\n  */\n  value) {\n    this.type = type;\n    this.value = value;\n  }\n  /**\n  Define a new type of annotation.\n  */\n\n\n  static define() {\n    return new AnnotationType();\n  }\n\n}\n/**\nMarker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).\n*/\n\n\nclass AnnotationType {\n  /**\n  Create an instance of this annotation.\n  */\n  of(value) {\n    return new Annotation(this, value);\n  }\n\n}\n/**\nRepresentation of a type of state effect. Defined with\n[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).\n*/\n\n\nclass StateEffectType {\n  /**\n  @internal\n  */\n  constructor( // The `any` types in these function types are there to work\n  // around TypeScript issue #37631, where the type guard on\n  // `StateEffect.is` mysteriously stops working when these properly\n  // have type `Value`.\n\n  /**\n  @internal\n  */\n  map) {\n    this.map = map;\n  }\n  /**\n  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this\n  type.\n  */\n\n\n  of(value) {\n    return new StateEffect(this, value);\n  }\n\n}\n/**\nState effects can be used to represent additional effects\nassociated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They\nare often useful to model changes to custom [state\nfields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in\ndocument or selection changes.\n*/\n\n\nclass StateEffect {\n  /**\n  @internal\n  */\n  constructor(\n  /**\n  @internal\n  */\n  type,\n  /**\n  The value of this effect.\n  */\n  value) {\n    this.type = type;\n    this.value = value;\n  }\n  /**\n  Map this effect through a position mapping. Will return\n  `undefined` when that ends up deleting the effect.\n  */\n\n\n  map(mapping) {\n    let mapped = this.type.map(this.value, mapping);\n    return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);\n  }\n  /**\n  Tells you whether this effect object is of a given\n  [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).\n  */\n\n\n  is(type) {\n    return this.type == type;\n  }\n  /**\n  Define a new effect type. The type parameter indicates the type\n  of values that his effect holds.\n  */\n\n\n  static define(spec = {}) {\n    return new StateEffectType(spec.map || (v => v));\n  }\n  /**\n  Map an array of effects through a change set.\n  */\n\n\n  static mapEffects(effects, mapping) {\n    if (!effects.length) return effects;\n    let result = [];\n\n    for (let effect of effects) {\n      let mapped = effect.map(mapping);\n      if (mapped) result.push(mapped);\n    }\n\n    return result;\n  }\n\n}\n/**\nThis effect can be used to reconfigure the root extensions of\nthe editor. Doing this will discard any extensions\n[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset\nthe content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)\ncompartments.\n*/\n\n\nStateEffect.reconfigure = /*@__PURE__*/StateEffect.define();\n/**\nAppend extensions to the top-level configuration of the editor.\n*/\n\nStateEffect.appendConfig = /*@__PURE__*/StateEffect.define();\n/**\nChanges to the editor state are grouped into transactions.\nTypically, a user action creates a single transaction, which may\ncontain any number of document changes, may change the selection,\nor have other effects. Create a transaction by calling\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\n*/\n\nclass Transaction {\n  /**\n  @internal\n  */\n  constructor(\n  /**\n  The state from which the transaction starts.\n  */\n  startState,\n  /**\n  The document changes made by this transaction.\n  */\n  changes,\n  /**\n  The selection set by this transaction, or undefined if it\n  doesn't explicitly set a selection.\n  */\n  selection,\n  /**\n  The effects added to the transaction.\n  */\n  effects,\n  /**\n  @internal\n  */\n  annotations,\n  /**\n  Whether the selection should be scrolled into view after this\n  transaction is dispatched.\n  */\n  scrollIntoView) {\n    this.startState = startState;\n    this.changes = changes;\n    this.selection = selection;\n    this.effects = effects;\n    this.annotations = annotations;\n    this.scrollIntoView = scrollIntoView;\n    /**\n    @internal\n    */\n\n    this._doc = null;\n    /**\n    @internal\n    */\n\n    this._state = null;\n    if (selection) checkSelection(selection, changes.newLength);\n    if (!annotations.some(a => a.type == Transaction.time)) this.annotations = annotations.concat(Transaction.time.of(Date.now()));\n  }\n  /**\n  The new document produced by the transaction. Contrary to\n  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't\n  force the entire new state to be computed right away, so it is\n  recommended that [transaction\n  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter\n  when they need to look at the new document.\n  */\n\n\n  get newDoc() {\n    return this._doc || (this._doc = this.changes.apply(this.startState.doc));\n  }\n  /**\n  The new selection produced by the transaction. If\n  [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,\n  this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's\n  current selection through the changes made by the transaction.\n  */\n\n\n  get newSelection() {\n    return this.selection || this.startState.selection.map(this.changes);\n  }\n  /**\n  The new state created by the transaction. Computed on demand\n  (but retained for subsequent access), so itis recommended not to\n  access it in [transaction\n  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.\n  */\n\n\n  get state() {\n    if (!this._state) this.startState.applyTransaction(this);\n    return this._state;\n  }\n  /**\n  Get the value of the given annotation type, if any.\n  */\n\n\n  annotation(type) {\n    for (let ann of this.annotations) if (ann.type == type) return ann.value;\n\n    return undefined;\n  }\n  /**\n  Indicates whether the transaction changed the document.\n  */\n\n\n  get docChanged() {\n    return !this.changes.empty;\n  }\n  /**\n  Indicates whether this transaction reconfigures the state\n  (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or\n  with a top-level configuration\n  [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).\n  */\n\n\n  get reconfigured() {\n    return this.startState.config != this.state.config;\n  }\n\n}\n/**\nAnnotation used to store transaction timestamps.\n*/\n\n\nTransaction.time = /*@__PURE__*/Annotation.define();\n/**\nAnnotation used to associate a transaction with a user interface\nevent. The view will set this to...\n\n - `\"input\"` when the user types text\n - `\"delete\"` when the user deletes the selection or text near the selection\n - `\"keyboardselection\"` when moving the selection via the keyboard\n - `\"pointerselection\"` when moving the selection through the pointing device\n - `\"paste\"` when pasting content\n - `\"cut\"` when cutting\n - `\"drop\"` when content is inserted via drag-and-drop\n*/\n\nTransaction.userEvent = /*@__PURE__*/Annotation.define();\n/**\nAnnotation indicating whether a transaction should be added to\nthe undo history or not.\n*/\n\nTransaction.addToHistory = /*@__PURE__*/Annotation.define();\n/**\nAnnotation indicating (when present and true) that a transaction\nrepresents a change made by some other actor, not the user. This\nis used, for example, to tag other people's changes in\ncollaborative editing.\n*/\n\nTransaction.remote = /*@__PURE__*/Annotation.define();\n\nfunction joinRanges(a, b) {\n  let result = [];\n\n  for (let iA = 0, iB = 0;;) {\n    let from, to;\n\n    if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {\n      from = a[iA++];\n      to = a[iA++];\n    } else if (iB < b.length) {\n      from = b[iB++];\n      to = b[iB++];\n    } else return result;\n\n    if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;\n  }\n}\n\nfunction mergeTransaction(a, b, sequential) {\n  var _a;\n\n  let mapForA, mapForB, changes;\n\n  if (sequential) {\n    mapForA = b.changes;\n    mapForB = ChangeSet.empty(b.changes.length);\n    changes = a.changes.compose(b.changes);\n  } else {\n    mapForA = b.changes.map(a.changes);\n    mapForB = a.changes.mapDesc(b.changes, true);\n    changes = a.changes.compose(mapForA);\n  }\n\n  return {\n    changes,\n    selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),\n    effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),\n    annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,\n    scrollIntoView: a.scrollIntoView || b.scrollIntoView\n  };\n}\n\nfunction resolveTransactionInner(state, spec, docSize) {\n  let sel = spec.selection;\n  return {\n    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),\n    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),\n    effects: asArray(spec.effects),\n    annotations: asArray(spec.annotations),\n    scrollIntoView: !!spec.scrollIntoView\n  };\n}\n\nfunction resolveTransaction(state, specs, filter) {\n  let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);\n  if (specs.length && specs[0].filter === false) filter = false;\n\n  for (let i = 1; i < specs.length; i++) {\n    if (specs[i].filter === false) filter = false;\n    let seq = !!specs[i].sequential;\n    s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);\n  }\n\n  let tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);\n  return extendTransaction(filter ? filterTransaction(tr) : tr);\n} // Finish a transaction by applying filters if necessary.\n\n\nfunction filterTransaction(tr) {\n  let state = tr.startState; // Change filters\n\n  let result = true;\n\n  for (let filter of state.facet(changeFilter)) {\n    let value = filter(tr);\n\n    if (value === false) {\n      result = false;\n      break;\n    }\n\n    if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);\n  }\n\n  if (result !== true) {\n    let changes, back;\n\n    if (result === false) {\n      back = tr.changes.invertedDesc;\n      changes = ChangeSet.empty(state.doc.length);\n    } else {\n      let filtered = tr.changes.filter(result);\n      changes = filtered.changes;\n      back = filtered.filtered.invertedDesc;\n    }\n\n    tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);\n  } // Transaction filters\n\n\n  let filters = state.facet(transactionFilter);\n\n  for (let i = filters.length - 1; i >= 0; i--) {\n    let filtered = filters[i](tr);\n    if (filtered instanceof Transaction) tr = filtered;else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction) tr = filtered[0];else tr = resolveTransaction(state, asArray(filtered), false);\n  }\n\n  return tr;\n}\n\nfunction extendTransaction(tr) {\n  let state = tr.startState,\n      extenders = state.facet(transactionExtender),\n      spec = tr;\n\n  for (let i = extenders.length - 1; i >= 0; i--) {\n    let extension = extenders[i](tr);\n    if (extension && Object.keys(extension).length) spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);\n  }\n\n  return spec == tr ? tr : new Transaction(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);\n}\n\nconst none = [];\n\nfunction asArray(value) {\n  return value == null ? none : Array.isArray(value) ? value : [value];\n}\n/**\nThe categories produced by a [character\ncategorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used\ndo things like selecting by word.\n*/\n\n\nvar CharCategory = /*@__PURE__*/function (CharCategory) {\n  /**\n  Word characters.\n  */\n  CharCategory[CharCategory[\"Word\"] = 0] = \"Word\";\n  /**\n  Whitespace.\n  */\n\n  CharCategory[CharCategory[\"Space\"] = 1] = \"Space\";\n  /**\n  Anything else.\n  */\n\n  CharCategory[CharCategory[\"Other\"] = 2] = \"Other\";\n  return CharCategory;\n}(CharCategory || (CharCategory = {}));\n\nconst nonASCIISingleCaseWordChar = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\nlet wordChar;\n\ntry {\n  wordChar = /*@__PURE__*/new RegExp(\"[\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\n} catch (_) {}\n\nfunction hasWordChar(str) {\n  if (wordChar) return wordChar.test(str);\n\n  for (let i = 0; i < str.length; i++) {\n    let ch = str[i];\n    if (/\\w/.test(ch) || ch > \"\\x80\" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;\n  }\n\n  return false;\n}\n\nfunction makeCategorizer(wordChars) {\n  return char => {\n    if (!/\\S/.test(char)) return CharCategory.Space;\n    if (hasWordChar(char)) return CharCategory.Word;\n\n    for (let i = 0; i < wordChars.length; i++) if (char.indexOf(wordChars[i]) > -1) return CharCategory.Word;\n\n    return CharCategory.Other;\n  };\n}\n/**\nThe editor state class is a persistent (immutable) data structure.\nTo update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a\n[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state\ninstance, without modifying the original object.\n\nAs such, _never_ mutate properties of a state directly. That'll\njust break things.\n*/\n\n\nclass EditorState {\n  /**\n  @internal\n  */\n  constructor(\n  /**\n  @internal\n  */\n  config,\n  /**\n  The current document.\n  */\n  doc,\n  /**\n  The current selection.\n  */\n  selection, tr = null) {\n    this.config = config;\n    this.doc = doc;\n    this.selection = selection;\n    /**\n    @internal\n    */\n\n    this.applying = null;\n    this.status = config.statusTemplate.slice();\n\n    if (tr && tr.startState.config == config) {\n      this.values = tr.startState.values.slice();\n    } else {\n      this.values = config.dynamicSlots.map(_ => null); // Copy over old values for shared facets/fields if this is a reconfigure\n\n      if (tr) for (let id in config.address) {\n        let cur = config.address[id],\n            prev = tr.startState.config.address[id];\n        if (prev != null && (cur & 1) == 0) this.values[cur >> 1] = getAddr(tr.startState, prev);\n      }\n    }\n\n    this.applying = tr; // Fill in the computed state immediately, so that further queries\n    // for it made during the update return this state\n\n    if (tr) tr._state = this;\n\n    for (let i = 0; i < this.config.dynamicSlots.length; i++) ensureAddr(this, i << 1);\n\n    this.applying = null;\n  }\n\n  field(field, require = true) {\n    let addr = this.config.address[field.id];\n\n    if (addr == null) {\n      if (require) throw new RangeError(\"Field is not present in this state\");\n      return undefined;\n    }\n\n    ensureAddr(this, addr);\n    return getAddr(this, addr);\n  }\n  /**\n  Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this\n  state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)\n  can be passed. Unless\n  [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the\n  [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec\n  are assumed to start in the _current_ document (not the document\n  produced by previous specs), and its\n  [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and\n  [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer\n  to the document created by its _own_ changes. The resulting\n  transaction contains the combined effect of all the different\n  specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later\n  specs take precedence over earlier ones.\n  */\n\n\n  update(...specs) {\n    return resolveTransaction(this, specs, true);\n  }\n  /**\n  @internal\n  */\n\n\n  applyTransaction(tr) {\n    let conf = this.config,\n        {\n      base,\n      compartments\n    } = conf;\n\n    for (let effect of tr.effects) {\n      if (effect.is(Compartment.reconfigure)) {\n        if (conf) {\n          compartments = new Map();\n          conf.compartments.forEach((val, key) => compartments.set(key, val));\n          conf = null;\n        }\n\n        compartments.set(effect.value.compartment, effect.value.extension);\n      } else if (effect.is(StateEffect.reconfigure)) {\n        conf = null;\n        base = effect.value;\n      } else if (effect.is(StateEffect.appendConfig)) {\n        conf = null;\n        base = asArray(base).concat(effect.value);\n      }\n    }\n\n    new EditorState(conf || Configuration.resolve(base, compartments, this), tr.newDoc, tr.newSelection, tr);\n  }\n  /**\n  Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that\n  replaces every selection range with the given content.\n  */\n\n\n  replaceSelection(text) {\n    if (typeof text == \"string\") text = this.toText(text);\n    return this.changeByRange(range => ({\n      changes: {\n        from: range.from,\n        to: range.to,\n        insert: text\n      },\n      range: EditorSelection.cursor(range.from + text.length)\n    }));\n  }\n  /**\n  Create a set of changes and a new selection by running the given\n  function for each range in the active selection. The function\n  can return an optional set of changes (in the coordinate space\n  of the start document), plus an updated range (in the coordinate\n  space of the document produced by the call's own changes). This\n  method will merge all the changes and ranges into a single\n  changeset and selection, and return it as a [transaction\n  spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to\n  [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\n  */\n\n\n  changeByRange(f) {\n    let sel = this.selection;\n    let result1 = f(sel.ranges[0]);\n    let changes = this.changes(result1.changes),\n        ranges = [result1.range];\n    let effects = asArray(result1.effects);\n\n    for (let i = 1; i < sel.ranges.length; i++) {\n      let result = f(sel.ranges[i]);\n      let newChanges = this.changes(result.changes),\n          newMapped = newChanges.map(changes);\n\n      for (let j = 0; j < i; j++) ranges[j] = ranges[j].map(newMapped);\n\n      let mapBy = changes.mapDesc(newChanges, true);\n      ranges.push(result.range.map(mapBy));\n      changes = changes.compose(newMapped);\n      effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));\n    }\n\n    return {\n      changes,\n      selection: EditorSelection.create(ranges, sel.mainIndex),\n      effects\n    };\n  }\n  /**\n  Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change\n  description, taking the state's document length and line\n  separator into account.\n  */\n\n\n  changes(spec = []) {\n    if (spec instanceof ChangeSet) return spec;\n    return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));\n  }\n  /**\n  Using the state's [line\n  separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a\n  [`Text`](https://codemirror.net/6/docs/ref/#text.Text) instance from the given string.\n  */\n\n\n  toText(string) {\n    return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));\n  }\n  /**\n  Return the given range of the document as a string.\n  */\n\n\n  sliceDoc(from = 0, to = this.doc.length) {\n    return this.doc.sliceString(from, to, this.lineBreak);\n  }\n  /**\n  Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).\n  */\n\n\n  facet(facet) {\n    let addr = this.config.address[facet.id];\n    if (addr == null) return facet.default;\n    ensureAddr(this, addr);\n    return getAddr(this, addr);\n  }\n  /**\n  Convert this state to a JSON-serializable object. When custom\n  fields should be serialized, you can pass them in as an object\n  mapping property names (in the resulting object, which should\n  not use `doc` or `selection`) to fields.\n  */\n\n\n  toJSON(fields) {\n    let result = {\n      doc: this.sliceDoc(),\n      selection: this.selection.toJSON()\n    };\n    if (fields) for (let prop in fields) {\n      let value = fields[prop];\n      if (value instanceof StateField) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);\n    }\n    return result;\n  }\n  /**\n  Deserialize a state from its JSON representation. When custom\n  fields should be deserialized, pass the same object you passed\n  to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as\n  third argument.\n  */\n\n\n  static fromJSON(json, config = {}, fields) {\n    if (!json || typeof json.doc != \"string\") throw new RangeError(\"Invalid JSON representation for EditorState\");\n    let fieldInit = [];\n    if (fields) for (let prop in fields) {\n      let field = fields[prop],\n          value = json[prop];\n      fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));\n    }\n    return EditorState.create({\n      doc: json.doc,\n      selection: EditorSelection.fromJSON(json.selection),\n      extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit\n    });\n  }\n  /**\n  Create a new state. You'll usually only need this when\n  initializing an editor—updated states are created by applying\n  transactions.\n  */\n\n\n  static create(config = {}) {\n    let configuration = Configuration.resolve(config.extensions || [], new Map());\n    let doc = config.doc instanceof Text ? config.doc : Text.of((config.doc || \"\").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));\n    let selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);\n    checkSelection(selection, doc.length);\n    if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();\n    return new EditorState(configuration, doc, selection);\n  }\n  /**\n  The size (in columns) of a tab in the document, determined by\n  the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.\n  */\n\n\n  get tabSize() {\n    return this.facet(EditorState.tabSize);\n  }\n  /**\n  Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)\n  string for this state.\n  */\n\n\n  get lineBreak() {\n    return this.facet(EditorState.lineSeparator) || \"\\n\";\n  }\n  /**\n  Look up a translation for the given phrase (via the\n  [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the\n  original string if no translation is found.\n  */\n\n\n  phrase(phrase) {\n    for (let map of this.facet(EditorState.phrases)) if (Object.prototype.hasOwnProperty.call(map, phrase)) return map[phrase];\n\n    return phrase;\n  }\n  /**\n  Find the values for a given language data field, provided by the\n  the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.\n  */\n\n\n  languageDataAt(name, pos) {\n    let values = [];\n\n    for (let provider of this.facet(languageData)) {\n      for (let result of provider(this, pos)) {\n        if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);\n      }\n    }\n\n    return values;\n  }\n  /**\n  Return a function that can categorize strings (expected to\n  represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak))\n  into one of:\n  \n   - Word (contains an alphanumeric character or a character\n     explicitly listed in the local language's `\"wordChars\"`\n     language data, which should be a string)\n   - Space (contains only whitespace)\n   - Other (anything else)\n  */\n\n\n  charCategorizer(at) {\n    return makeCategorizer(this.languageDataAt(\"wordChars\", at).join(\"\"));\n  }\n  /**\n  Find the word at the given position, meaning the range\n  containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters\n  around it. If no word characters are adjacent to the position,\n  this returns null.\n  */\n\n\n  wordAt(pos) {\n    let {\n      text,\n      from,\n      length\n    } = this.doc.lineAt(pos);\n    let cat = this.charCategorizer(pos);\n    let start = pos - from,\n        end = pos - from;\n\n    while (start > 0) {\n      let prev = findClusterBreak(text, start, false);\n      if (cat(text.slice(prev, start)) != CharCategory.Word) break;\n      start = prev;\n    }\n\n    while (end < length) {\n      let next = findClusterBreak(text, end);\n      if (cat(text.slice(end, next)) != CharCategory.Word) break;\n      end = next;\n    }\n\n    return start == end ? EditorSelection.range(start + from, end + from) : null;\n  }\n\n}\n/**\nA facet that, when enabled, causes the editor to allow multiple\nranges to be selected. Be careful though, because by default the\neditor relies on the native DOM selection, which cannot handle\nmultiple selections. An extension like\n[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make\nsecondary selections visible to the user.\n*/\n\n\nEditorState.allowMultipleSelections = allowMultipleSelections;\n/**\nConfigures the tab size to use in this state. The first\n(highest-precedence) value of the facet is used. If no value is\ngiven, this defaults to 4.\n*/\n\nEditorState.tabSize = /*@__PURE__*/Facet.define({\n  combine: values => values.length ? values[0] : 4\n});\n/**\nThe line separator to use. By default, any of `\"\\n\"`, `\"\\r\\n\"`\nand `\"\\r\"` is treated as a separator when splitting lines, and\nlines are joined with `\"\\n\"`.\n\nWhen you configure a value here, only that precise separator\nwill be used, allowing you to round-trip documents through the\neditor without normalizing line separators.\n*/\n\nEditorState.lineSeparator = lineSeparator;\n/**\nRegisters translation phrases. The\n[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through\nall objects registered with this facet to find translations for\nits argument.\n*/\n\nEditorState.phrases = /*@__PURE__*/Facet.define();\n/**\nA facet used to register [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.\n*/\n\nEditorState.languageData = languageData;\n/**\nFacet used to register change filters, which are called for each\ntransaction (unless explicitly\n[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress\npart of the transaction's changes.\n\nSuch a function can return `true` to indicate that it doesn't\nwant to do anything, `false` to completely stop the changes in\nthe transaction, or a set of ranges in which changes should be\nsuppressed. Such ranges are represented as an array of numbers,\nwith each pair of two number indicating the start and end of a\nrange. So for example `[10, 20, 100, 110]` suppresses changes\nbetween 10 and 20, and between 100 and 110.\n*/\n\nEditorState.changeFilter = changeFilter;\n/**\nFacet used to register a hook that gets a chance to update or\nreplace transaction specs before they are applied. This will\nonly be applied for transactions that don't have\n[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You\ncan either return a single (possibly the input transaction), or\nan array of specs (which will be combined in the same way as the\narguments to [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).\n\nWhen possible, it is recommended to avoid accessing\n[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,\nsince it will force creation of a state that will then be\ndiscarded again, if the transaction is actually filtered.\n\n(This functionality should be used with care. Indiscriminately\nmodifying transaction is likely to break something or degrade\nthe user experience.)\n*/\n\nEditorState.transactionFilter = transactionFilter;\n/**\nThis is a more limited form of\n[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),\nwhich can only add\n[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and\n[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type\nof filter runs even the transaction has disabled regular\n[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable\nfor effects that don't need to touch the changes or selection,\nbut do want to process every transaction.\n\nExtenders run _after_ filters, when both are applied.\n*/\n\nEditorState.transactionExtender = transactionExtender;\nCompartment.reconfigure = /*@__PURE__*/StateEffect.define();\n/**\nUtility function for combining behaviors to fill in a config\nobject from an array of provided configs. Will, by default, error\nwhen a field gets two values that aren't `===`-equal, but you can\nprovide combine functions per field to do something else.\n*/\n\nfunction combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that\ncombine = {}) {\n  let result = {};\n\n  for (let config of configs) for (let key of Object.keys(config)) {\n    let value = config[key],\n        current = result[key];\n    if (current === undefined) result[key] = value;else if (current === value || value === undefined) ; // No conflict\n    else if (Object.hasOwnProperty.call(combine, key)) result[key] = combine[key](current, value);else throw new Error(\"Config merge conflict for field \" + key);\n  }\n\n  for (let key in defaults) if (result[key] === undefined) result[key] = defaults[key];\n\n  return result;\n}\n\nexport { Annotation, AnnotationType, ChangeDesc, ChangeSet, CharCategory, Compartment, EditorSelection, EditorState, Facet, MapMode, Prec, SelectionRange, StateEffect, StateEffectType, StateField, Transaction, combineConfig };","map":{"version":3,"sources":["D:/MSIT/Practicum - iLMS/editor-codemirror6/node_modules/@codemirror/state/dist/index.js"],"names":["Text","findClusterBreak","DefaultSplit","MapMode","ChangeDesc","constructor","sections","length","result","i","newLength","ins","empty","iterGaps","f","posA","posB","len","iterChangedRanges","individual","iterChanges","invertedDesc","push","composeDesc","other","composeSets","mapDesc","before","mapSet","mapPos","pos","assoc","mode","Simple","endA","TrackDel","TrackBefore","TrackAfter","RangeError","touchesRange","from","to","end","toString","toJSON","fromJSON","json","Array","isArray","some","a","ChangeSet","inserted","apply","doc","fromA","toA","fromB","_toB","text","replace","invert","slice","index","compose","map","desc","filter","ranges","resultSections","resultInserted","filteredSections","iter","SectionIter","done","next","Math","min","addSection","off","addInsert","forward","changes","filtered","parts","concat","of","lineSep","total","flush","force","set","process","spec","sub","insert","insText","split","insLen","part","e","forceJoin","last","values","value","append","endB","setA","setB","mkSet","b","skip","Error","open","len2","sectionLen","insB","textBit","forward2","undefined","SelectionRange","flags","anchor","head","bidiLevel","level","goalColumn","change","extend","EditorSelection","range","abs","eq","mainIndex","create","r","main","asSingle","addRange","replaceRange","which","single","normalized","cursor","goal","sort","indexOf","prev","max","splice","checkSelection","selection","docLength","nextID","Facet","combine","compareInput","compare","isStatic","extensions","id","default","define","config","sameArray","static","enables","FacetProvider","compute","deps","get","computeN","field","x","state","every","dependencies","facet","type","dynamicSlot","addresses","_a","getter","idx","multi","depDoc","depSel","depAddrs","dep","tr","reconfigured","depChanged","docChanged","addr","ensureAddr","newVal","oldVal","startState","compareArray","dynamicFacetSlot","providers","providerAddrs","p","providerTypes","dynamic","oldAddr","address","changed","dynAddr","getAddr","val","maybeIndex","found","initField","StateField","createF","updateF","compareF","provides","update","provide","init","find","slot","extension","Prec_","fallback","override","prec","ext","PrecExtension","Prec","inner","Compartment","CompartmentInstance","reconfigure","content","compartment","compartments","Configuration","base","dynamicSlots","staticValues","statusTemplate","staticFacet","resolve","oldState","fields","facets","Object","newCompartments","Map","flatten","seen","known","delete","has","reduce","status","applying","languageData","allowMultipleSelections","v","lineSeparator","changeFilter","transactionFilter","transactionExtender","Annotation","AnnotationType","StateEffectType","StateEffect","mapping","mapped","is","mapEffects","effects","effect","appendConfig","Transaction","annotations","scrollIntoView","_doc","_state","time","Date","now","newDoc","newSelection","applyTransaction","annotation","ann","userEvent","addToHistory","remote","joinRanges","iA","iB","mergeTransaction","sequential","mapForA","mapForB","resolveTransactionInner","docSize","sel","asArray","resolveTransaction","specs","s","seq","extendTransaction","filterTransaction","back","filters","extenders","keys","none","CharCategory","nonASCIISingleCaseWordChar","wordChar","RegExp","_","hasWordChar","str","test","ch","toUpperCase","toLowerCase","makeCategorizer","wordChars","char","Space","Word","Other","EditorState","cur","require","conf","forEach","key","replaceSelection","toText","changeByRange","result1","newChanges","newMapped","j","mapBy","string","sliceDoc","sliceString","lineBreak","prop","fieldInit","configuration","tabSize","phrase","phrases","prototype","hasOwnProperty","call","languageDataAt","name","provider","charCategorizer","at","join","wordAt","lineAt","cat","start","combineConfig","configs","defaults","current"],"mappings":"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","sourcesContent":["import { Text, findClusterBreak } from '@codemirror/text';\nexport { Text } from '@codemirror/text';\n\nconst DefaultSplit = /\\r\\n?|\\n/;\n/**\nDistinguishes different ways in which positions can be mapped.\n*/\nvar MapMode = /*@__PURE__*/(function (MapMode) {\n    /**\n    Map a position to a valid new position, even when its context\n    was deleted.\n    */\n    MapMode[MapMode[\"Simple\"] = 0] = \"Simple\";\n    /**\n    Return null if deletion happens across the position.\n    */\n    MapMode[MapMode[\"TrackDel\"] = 1] = \"TrackDel\";\n    /**\n    Return null if the character _before_ the position is deleted.\n    */\n    MapMode[MapMode[\"TrackBefore\"] = 2] = \"TrackBefore\";\n    /**\n    Return null if the character _after_ the position is deleted.\n    */\n    MapMode[MapMode[\"TrackAfter\"] = 3] = \"TrackAfter\";\nreturn MapMode})(MapMode || (MapMode = {}));\n/**\nA change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)\nthat doesn't store the inserted text. As such, it can't be\napplied, but is cheaper to store and manipulate.\n*/\nclass ChangeDesc {\n    // Sections are encoded as pairs of integers. The first is the\n    // length in the current document, and the second is -1 for\n    // unaffected sections, and the length of the replacement content\n    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,\n    // 0), and a replacement two positive numbers.\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    sections) {\n        this.sections = sections;\n    }\n    /**\n    The length of the document before the change.\n    */\n    get length() {\n        let result = 0;\n        for (let i = 0; i < this.sections.length; i += 2)\n            result += this.sections[i];\n        return result;\n    }\n    /**\n    The length of the document after the change.\n    */\n    get newLength() {\n        let result = 0;\n        for (let i = 0; i < this.sections.length; i += 2) {\n            let ins = this.sections[i + 1];\n            result += ins < 0 ? this.sections[i] : ins;\n        }\n        return result;\n    }\n    /**\n    False when there are actual changes in this set.\n    */\n    get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }\n    /**\n    Iterate over the unchanged parts left by these changes.\n    */\n    iterGaps(f) {\n        for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++];\n            if (ins < 0) {\n                f(posA, posB, len);\n                posB += len;\n            }\n            else {\n                posB += ins;\n            }\n            posA += len;\n        }\n    }\n    /**\n    Iterate over the ranges changed by these changes. (See\n    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a\n    variant that also provides you with the inserted text.)\n    \n    When `individual` is true, adjacent changes (which are kept\n    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are\n    reported separately.\n    */\n    iterChangedRanges(f, individual = false) {\n        iterChanges(this, f, individual);\n    }\n    /**\n    Get a description of the inverted form of these changes.\n    */\n    get invertedDesc() {\n        let sections = [];\n        for (let i = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++];\n            if (ins < 0)\n                sections.push(len, ins);\n            else\n                sections.push(ins, len);\n        }\n        return new ChangeDesc(sections);\n    }\n    /**\n    Compute the combined effect of applying another set of changes\n    after this one. The length of the document after this set should\n    match the length before `other`.\n    */\n    composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }\n    /**\n    Map this description, which should start with the same document\n    as `other`, over another set of changes, so that it can be\n    applied after it. When `before` is true, map as if the changes\n    in `other` happened before the ones in `this`.\n    */\n    mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }\n    mapPos(pos, assoc = -1, mode = MapMode.Simple) {\n        let posA = 0, posB = 0;\n        for (let i = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;\n            if (ins < 0) {\n                if (endA > pos)\n                    return posB + (pos - posA);\n                posB += len;\n            }\n            else {\n                if (mode != MapMode.Simple && endA >= pos &&\n                    (mode == MapMode.TrackDel && posA < pos && endA > pos ||\n                        mode == MapMode.TrackBefore && posA < pos ||\n                        mode == MapMode.TrackAfter && endA > pos))\n                    return null;\n                if (endA > pos || endA == pos && assoc < 0 && !len)\n                    return pos == posA || assoc < 0 ? posB : posB + ins;\n                posB += ins;\n            }\n            posA = endA;\n        }\n        if (pos > posA)\n            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);\n        return posB;\n    }\n    /**\n    Check whether these changes touch a given range. When one of the\n    changes entirely covers the range, the string `\"cover\"` is\n    returned.\n    */\n    touchesRange(from, to = from) {\n        for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {\n            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;\n            if (ins >= 0 && pos <= to && end >= from)\n                return pos < from && end > to ? \"cover\" : true;\n            pos = end;\n        }\n        return false;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let result = \"\";\n        for (let i = 0; i < this.sections.length;) {\n            let len = this.sections[i++], ins = this.sections[i++];\n            result += (result ? \" \" : \"\") + len + (ins >= 0 ? \":\" + ins : \"\");\n        }\n        return result;\n    }\n    /**\n    Serialize this change desc to a JSON-representable value.\n    */\n    toJSON() { return this.sections; }\n    /**\n    Create a change desc from its JSON representation (as produced\n    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).\n    */\n    static fromJSON(json) {\n        if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != \"number\"))\n            throw new RangeError(\"Invalid JSON representation of ChangeDesc\");\n        return new ChangeDesc(json);\n    }\n}\n/**\nA change set represents a group of modifications to a document. It\nstores the document length, and can only be applied to documents\nwith exactly that length.\n*/\nclass ChangeSet extends ChangeDesc {\n    /**\n    @internal\n    */\n    constructor(sections, \n    /**\n    @internal\n    */\n    inserted) {\n        super(sections);\n        this.inserted = inserted;\n    }\n    /**\n    Apply the changes to a document, returning the modified\n    document.\n    */\n    apply(doc) {\n        if (this.length != doc.length)\n            throw new RangeError(\"Applying change set to a document with the wrong length\");\n        iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);\n        return doc;\n    }\n    mapDesc(other, before = false) { return mapSet(this, other, before, true); }\n    /**\n    Given the document as it existed _before_ the changes, return a\n    change set that represents the inverse of this set, which could\n    be used to go from the document created by the changes back to\n    the document as it existed before the changes.\n    */\n    invert(doc) {\n        let sections = this.sections.slice(), inserted = [];\n        for (let i = 0, pos = 0; i < sections.length; i += 2) {\n            let len = sections[i], ins = sections[i + 1];\n            if (ins >= 0) {\n                sections[i] = ins;\n                sections[i + 1] = len;\n                let index = i >> 1;\n                while (inserted.length < index)\n                    inserted.push(Text.empty);\n                inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);\n            }\n            pos += len;\n        }\n        return new ChangeSet(sections, inserted);\n    }\n    /**\n    Combine two subsequent change sets into a single set. `other`\n    must start in the document produced by `this`. If `this` goes\n    `docA` → `docB` and `other` represents `docB` → `docC`, the\n    returned value will represent the change `docA` → `docC`.\n    */\n    compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }\n    /**\n    Given another change set starting in the same document, maps this\n    change set over the other, producing a new change set that can be\n    applied to the document produced by applying `other`. When\n    `before` is `true`, order changes as if `this` comes before\n    `other`, otherwise (the default) treat `other` as coming first.\n    \n    Given two changes `A` and `B`, `A.compose(B.map(A))` and\n    `B.compose(A.map(B, true))` will produce the same document. This\n    provides a basic form of [operational\n    transformation](https://en.wikipedia.org/wiki/Operational_transformation),\n    and can be used for collaborative editing.\n    */\n    map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }\n    /**\n    Iterate over the changed ranges in the document, calling `f` for\n    each.\n    \n    When `individual` is true, adjacent changes are reported\n    separately.\n    */\n    iterChanges(f, individual = false) {\n        iterChanges(this, f, individual);\n    }\n    /**\n    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change\n    set.\n    */\n    get desc() { return new ChangeDesc(this.sections); }\n    /**\n    @internal\n    */\n    filter(ranges) {\n        let resultSections = [], resultInserted = [], filteredSections = [];\n        let iter = new SectionIter(this);\n        done: for (let i = 0, pos = 0;;) {\n            let next = i == ranges.length ? 1e9 : ranges[i++];\n            while (pos < next || pos == next && iter.len == 0) {\n                if (iter.done)\n                    break done;\n                let len = Math.min(iter.len, next - pos);\n                addSection(filteredSections, len, -1);\n                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;\n                addSection(resultSections, len, ins);\n                if (ins > 0)\n                    addInsert(resultInserted, resultSections, iter.text);\n                iter.forward(len);\n                pos += len;\n            }\n            let end = ranges[i++];\n            while (pos < end) {\n                if (iter.done)\n                    break done;\n                let len = Math.min(iter.len, end - pos);\n                addSection(resultSections, len, -1);\n                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);\n                iter.forward(len);\n                pos += len;\n            }\n        }\n        return { changes: new ChangeSet(resultSections, resultInserted),\n            filtered: new ChangeDesc(filteredSections) };\n    }\n    /**\n    Serialize this change set to a JSON-representable value.\n    */\n    toJSON() {\n        let parts = [];\n        for (let i = 0; i < this.sections.length; i += 2) {\n            let len = this.sections[i], ins = this.sections[i + 1];\n            if (ins < 0)\n                parts.push(len);\n            else if (ins == 0)\n                parts.push([len]);\n            else\n                parts.push([len].concat(this.inserted[i >> 1].toJSON()));\n        }\n        return parts;\n    }\n    /**\n    Create a change set for the given changes, for a document of the\n    given length, using `lineSep` as line separator.\n    */\n    static of(changes, length, lineSep) {\n        let sections = [], inserted = [], pos = 0;\n        let total = null;\n        function flush(force = false) {\n            if (!force && !sections.length)\n                return;\n            if (pos < length)\n                addSection(sections, length - pos, -1);\n            let set = new ChangeSet(sections, inserted);\n            total = total ? total.compose(set.map(total)) : set;\n            sections = [];\n            inserted = [];\n            pos = 0;\n        }\n        function process(spec) {\n            if (Array.isArray(spec)) {\n                for (let sub of spec)\n                    process(sub);\n            }\n            else if (spec instanceof ChangeSet) {\n                if (spec.length != length)\n                    throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);\n                flush();\n                total = total ? total.compose(spec.map(total)) : spec;\n            }\n            else {\n                let { from, to = from, insert } = spec;\n                if (from > to || from < 0 || to > length)\n                    throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);\n                let insText = !insert ? Text.empty : typeof insert == \"string\" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;\n                let insLen = insText.length;\n                if (from == to && insLen == 0)\n                    return;\n                if (from < pos)\n                    flush();\n                if (from > pos)\n                    addSection(sections, from - pos, -1);\n                addSection(sections, to - from, insLen);\n                addInsert(inserted, sections, insText);\n                pos = to;\n            }\n        }\n        process(changes);\n        flush(!total);\n        return total;\n    }\n    /**\n    Create an empty changeset of the given length.\n    */\n    static empty(length) {\n        return new ChangeSet(length ? [length, -1] : [], []);\n    }\n    /**\n    Create a changeset from its JSON representation (as produced by\n    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).\n    */\n    static fromJSON(json) {\n        if (!Array.isArray(json))\n            throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n        let sections = [], inserted = [];\n        for (let i = 0; i < json.length; i++) {\n            let part = json[i];\n            if (typeof part == \"number\") {\n                sections.push(part, -1);\n            }\n            else if (!Array.isArray(part) || typeof part[0] != \"number\" || part.some((e, i) => i && typeof e != \"string\")) {\n                throw new RangeError(\"Invalid JSON representation of ChangeSet\");\n            }\n            else if (part.length == 1) {\n                sections.push(part[0], 0);\n            }\n            else {\n                while (inserted.length < i)\n                    inserted.push(Text.empty);\n                inserted[i] = Text.of(part.slice(1));\n                sections.push(part[0], inserted[i].length);\n            }\n        }\n        return new ChangeSet(sections, inserted);\n    }\n}\nfunction addSection(sections, len, ins, forceJoin = false) {\n    if (len == 0 && ins <= 0)\n        return;\n    let last = sections.length - 2;\n    if (last >= 0 && ins <= 0 && ins == sections[last + 1])\n        sections[last] += len;\n    else if (len == 0 && sections[last] == 0)\n        sections[last + 1] += ins;\n    else if (forceJoin) {\n        sections[last] += len;\n        sections[last + 1] += ins;\n    }\n    else\n        sections.push(len, ins);\n}\nfunction addInsert(values, sections, value) {\n    if (value.length == 0)\n        return;\n    let index = (sections.length - 2) >> 1;\n    if (index < values.length) {\n        values[values.length - 1] = values[values.length - 1].append(value);\n    }\n    else {\n        while (values.length < index)\n            values.push(Text.empty);\n        values.push(value);\n    }\n}\nfunction iterChanges(desc, f, individual) {\n    let inserted = desc.inserted;\n    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {\n        let len = desc.sections[i++], ins = desc.sections[i++];\n        if (ins < 0) {\n            posA += len;\n            posB += len;\n        }\n        else {\n            let endA = posA, endB = posB, text = Text.empty;\n            for (;;) {\n                endA += len;\n                endB += ins;\n                if (ins && inserted)\n                    text = text.append(inserted[(i - 2) >> 1]);\n                if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)\n                    break;\n                len = desc.sections[i++];\n                ins = desc.sections[i++];\n            }\n            f(posA, endA, posB, endB, text);\n            posA = endA;\n            posB = endB;\n        }\n    }\n}\nfunction mapSet(setA, setB, before, mkSet = false) {\n    let sections = [], insert = mkSet ? [] : null;\n    let a = new SectionIter(setA), b = new SectionIter(setB);\n    for (let posA = 0, posB = 0;;) {\n        if (a.ins == -1) {\n            posA += a.len;\n            a.next();\n        }\n        else if (b.ins == -1 && posB < posA) {\n            let skip = Math.min(b.len, posA - posB);\n            b.forward(skip);\n            addSection(sections, skip, -1);\n            posB += skip;\n        }\n        else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {\n            addSection(sections, b.ins, -1);\n            while (posA > posB && !a.done && posA + a.len < posB + b.len) {\n                posA += a.len;\n                a.next();\n            }\n            posB += b.len;\n            b.next();\n        }\n        else if (a.ins >= 0) {\n            let len = 0, end = posA + a.len;\n            for (;;) {\n                if (b.ins >= 0 && posB > posA && posB + b.len < end) {\n                    len += b.ins;\n                    posB += b.len;\n                    b.next();\n                }\n                else if (b.ins == -1 && posB < end) {\n                    let skip = Math.min(b.len, end - posB);\n                    len += skip;\n                    b.forward(skip);\n                    posB += skip;\n                }\n                else {\n                    break;\n                }\n            }\n            addSection(sections, len, a.ins);\n            if (insert)\n                addInsert(insert, sections, a.text);\n            posA = end;\n            a.next();\n        }\n        else if (a.done && b.done) {\n            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);\n        }\n        else {\n            throw new Error(\"Mismatched change set lengths\");\n        }\n    }\n}\nfunction composeSets(setA, setB, mkSet = false) {\n    let sections = [];\n    let insert = mkSet ? [] : null;\n    let a = new SectionIter(setA), b = new SectionIter(setB);\n    for (let open = false;;) {\n        if (a.done && b.done) {\n            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);\n        }\n        else if (a.ins == 0) { // Deletion in A\n            addSection(sections, a.len, 0, open);\n            a.next();\n        }\n        else if (b.len == 0 && !b.done) { // Insertion in B\n            addSection(sections, 0, b.ins, open);\n            if (insert)\n                addInsert(insert, sections, b.text);\n            b.next();\n        }\n        else if (a.done || b.done) {\n            throw new Error(\"Mismatched change set lengths\");\n        }\n        else {\n            let len = Math.min(a.len2, b.len), sectionLen = sections.length;\n            if (a.ins == -1) {\n                let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;\n                addSection(sections, len, insB, open);\n                if (insert && insB)\n                    addInsert(insert, sections, b.text);\n            }\n            else if (b.ins == -1) {\n                addSection(sections, a.off ? 0 : a.len, len, open);\n                if (insert)\n                    addInsert(insert, sections, a.textBit(len));\n            }\n            else {\n                addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);\n                if (insert && !b.off)\n                    addInsert(insert, sections, b.text);\n            }\n            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);\n            a.forward2(len);\n            b.forward(len);\n        }\n    }\n}\nclass SectionIter {\n    constructor(set) {\n        this.set = set;\n        this.i = 0;\n        this.next();\n    }\n    next() {\n        let { sections } = this.set;\n        if (this.i < sections.length) {\n            this.len = sections[this.i++];\n            this.ins = sections[this.i++];\n        }\n        else {\n            this.len = 0;\n            this.ins = -2;\n        }\n        this.off = 0;\n    }\n    get done() { return this.ins == -2; }\n    get len2() { return this.ins < 0 ? this.len : this.ins; }\n    get text() {\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\n        return index >= inserted.length ? Text.empty : inserted[index];\n    }\n    textBit(len) {\n        let { inserted } = this.set, index = (this.i - 2) >> 1;\n        return index >= inserted.length && !len ? Text.empty\n            : inserted[index].slice(this.off, len == null ? undefined : this.off + len);\n    }\n    forward(len) {\n        if (len == this.len)\n            this.next();\n        else {\n            this.len -= len;\n            this.off += len;\n        }\n    }\n    forward2(len) {\n        if (this.ins == -1)\n            this.forward(len);\n        else if (len == this.ins)\n            this.next();\n        else {\n            this.ins -= len;\n            this.off += len;\n        }\n    }\n}\n\n/**\nA single selection range. When\n[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)\nis enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold\nmultiple ranges. By default, selections hold exactly one range.\n*/\nclass SelectionRange {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The lower boundary of the range.\n    */\n    from, \n    /**\n    The upper boundary of the range.\n    */\n    to, flags) {\n        this.from = from;\n        this.to = to;\n        this.flags = flags;\n    }\n    /**\n    The anchor of the range—the side that doesn't move when you\n    extend it.\n    */\n    get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }\n    /**\n    The head of the range, which is moved when the range is\n    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).\n    */\n    get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }\n    /**\n    True when `anchor` and `head` are at the same position.\n    */\n    get empty() { return this.from == this.to; }\n    /**\n    If this is a cursor that is explicitly associated with the\n    character on one of its sides, this returns the side. -1 means\n    the character before its position, 1 the character after, and 0\n    means no association.\n    */\n    get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }\n    /**\n    The bidirectional text level associated with this cursor, if\n    any.\n    */\n    get bidiLevel() {\n        let level = this.flags & 3 /* BidiLevelMask */;\n        return level == 3 ? null : level;\n    }\n    /**\n    The goal column (stored vertical offset) associated with a\n    cursor. This is used to preserve the vertical position when\n    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across\n    lines of different length.\n    */\n    get goalColumn() {\n        let value = this.flags >> 5 /* GoalColumnOffset */;\n        return value == 33554431 /* NoGoalColumn */ ? undefined : value;\n    }\n    /**\n    Map this range through a change, producing a valid range in the\n    updated document.\n    */\n    map(change, assoc = -1) {\n        let from = change.mapPos(this.from, assoc), to = change.mapPos(this.to, assoc);\n        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);\n    }\n    /**\n    Extend this range to cover at least `from` to `to`.\n    */\n    extend(from, to = from) {\n        if (from <= this.anchor && to >= this.anchor)\n            return EditorSelection.range(from, to);\n        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;\n        return EditorSelection.range(this.anchor, head);\n    }\n    /**\n    Compare this range to another range.\n    */\n    eq(other) {\n        return this.anchor == other.anchor && this.head == other.head;\n    }\n    /**\n    Return a JSON-serializable object representing the range.\n    */\n    toJSON() { return { anchor: this.anchor, head: this.head }; }\n    /**\n    Convert a JSON representation of a range to a `SelectionRange`\n    instance.\n    */\n    static fromJSON(json) {\n        if (!json || typeof json.anchor != \"number\" || typeof json.head != \"number\")\n            throw new RangeError(\"Invalid JSON representation for SelectionRange\");\n        return EditorSelection.range(json.anchor, json.head);\n    }\n}\n/**\nAn editor selection holds one or more selection ranges.\n*/\nclass EditorSelection {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The ranges in the selection, sorted by position. Ranges cannot\n    overlap (but they may touch, if they aren't empty).\n    */\n    ranges, \n    /**\n    The index of the _main_ range in the selection (which is\n    usually the range that was added last).\n    */\n    mainIndex = 0) {\n        this.ranges = ranges;\n        this.mainIndex = mainIndex;\n    }\n    /**\n    Map a selection through a change. Used to adjust the selection\n    position for changes.\n    */\n    map(change, assoc = -1) {\n        if (change.empty)\n            return this;\n        return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);\n    }\n    /**\n    Compare this selection to another selection.\n    */\n    eq(other) {\n        if (this.ranges.length != other.ranges.length ||\n            this.mainIndex != other.mainIndex)\n            return false;\n        for (let i = 0; i < this.ranges.length; i++)\n            if (!this.ranges[i].eq(other.ranges[i]))\n                return false;\n        return true;\n    }\n    /**\n    Get the primary selection range. Usually, you should make sure\n    your code applies to _all_ ranges, by using methods like\n    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).\n    */\n    get main() { return this.ranges[this.mainIndex]; }\n    /**\n    Make sure the selection only has one range. Returns a selection\n    holding only the main range from this selection.\n    */\n    asSingle() {\n        return this.ranges.length == 1 ? this : new EditorSelection([this.main]);\n    }\n    /**\n    Extend this selection with an extra range.\n    */\n    addRange(range, main = true) {\n        return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);\n    }\n    /**\n    Replace a given range with another range, and then normalize the\n    selection to merge and sort ranges if necessary.\n    */\n    replaceRange(range, which = this.mainIndex) {\n        let ranges = this.ranges.slice();\n        ranges[which] = range;\n        return EditorSelection.create(ranges, this.mainIndex);\n    }\n    /**\n    Convert this selection to an object that can be serialized to\n    JSON.\n    */\n    toJSON() {\n        return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };\n    }\n    /**\n    Create a selection from a JSON representation.\n    */\n    static fromJSON(json) {\n        if (!json || !Array.isArray(json.ranges) || typeof json.main != \"number\" || json.main >= json.ranges.length)\n            throw new RangeError(\"Invalid JSON representation for EditorSelection\");\n        return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);\n    }\n    /**\n    Create a selection holding a single range.\n    */\n    static single(anchor, head = anchor) {\n        return new EditorSelection([EditorSelection.range(anchor, head)], 0);\n    }\n    /**\n    Sort and merge the given set of ranges, creating a valid\n    selection.\n    */\n    static create(ranges, mainIndex = 0) {\n        if (ranges.length == 0)\n            throw new RangeError(\"A selection needs at least one range\");\n        for (let pos = 0, i = 0; i < ranges.length; i++) {\n            let range = ranges[i];\n            if (range.empty ? range.from <= pos : range.from < pos)\n                return normalized(ranges.slice(), mainIndex);\n            pos = range.to;\n        }\n        return new EditorSelection(ranges, mainIndex);\n    }\n    /**\n    Create a cursor selection range at the given position. You can\n    safely ignore the optional arguments in most situations.\n    */\n    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {\n        return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |\n            (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |\n            ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));\n    }\n    /**\n    Create a selection range.\n    */\n    static range(anchor, head, goalColumn) {\n        let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;\n        return head < anchor ? new SelectionRange(head, anchor, 16 /* Inverted */ | goal) : new SelectionRange(anchor, head, goal);\n    }\n}\nfunction normalized(ranges, mainIndex = 0) {\n    let main = ranges[mainIndex];\n    ranges.sort((a, b) => a.from - b.from);\n    mainIndex = ranges.indexOf(main);\n    for (let i = 1; i < ranges.length; i++) {\n        let range = ranges[i], prev = ranges[i - 1];\n        if (range.empty ? range.from <= prev.to : range.from < prev.to) {\n            let from = prev.from, to = Math.max(range.to, prev.to);\n            if (i <= mainIndex)\n                mainIndex--;\n            ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));\n        }\n    }\n    return new EditorSelection(ranges, mainIndex);\n}\nfunction checkSelection(selection, docLength) {\n    for (let range of selection.ranges)\n        if (range.to > docLength)\n            throw new RangeError(\"Selection points outside of document\");\n}\n\nlet nextID = 0;\n/**\nA facet is a labeled value that is associated with an editor\nstate. It takes inputs from any number of extensions, and combines\nthose into a single output value.\n\nExamples of facets are the [theme](https://codemirror.net/6/docs/ref/#view.EditorView^theme) styles\nassociated with an editor or the [tab\nsize](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) (which is reduced to a single\nvalue, using the input with the hightest precedence).\n*/\nclass Facet {\n    constructor(\n    /**\n    @internal\n    */\n    combine, \n    /**\n    @internal\n    */\n    compareInput, \n    /**\n    @internal\n    */\n    compare, isStatic, \n    /**\n    @internal\n    */\n    extensions) {\n        this.combine = combine;\n        this.compareInput = compareInput;\n        this.compare = compare;\n        this.isStatic = isStatic;\n        this.extensions = extensions;\n        /**\n        @internal\n        */\n        this.id = nextID++;\n        this.default = combine([]);\n    }\n    /**\n    Define a new facet.\n    */\n    static define(config = {}) {\n        return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray : (a, b) => a === b), !!config.static, config.enables);\n    }\n    /**\n    Returns an extension that adds the given value for this facet.\n    */\n    of(value) {\n        return new FacetProvider([], this, 0 /* Static */, value);\n    }\n    /**\n    Create an extension that computes a value for the facet from a\n    state. You must take care to declare the parts of the state that\n    this value depends on, since your function is only called again\n    for a new state when one of those parts changed.\n    \n    In most cases, you'll want to use the\n    [`provide`](https://codemirror.net/6/docs/ref/#state.StateField^define^config.provide) option when\n    defining a field instead.\n    */\n    compute(deps, get) {\n        if (this.isStatic)\n            throw new Error(\"Can't compute a static facet\");\n        return new FacetProvider(deps, this, 1 /* Single */, get);\n    }\n    /**\n    Create an extension that computes zero or more values for this\n    facet from a state.\n    */\n    computeN(deps, get) {\n        if (this.isStatic)\n            throw new Error(\"Can't compute a static facet\");\n        return new FacetProvider(deps, this, 2 /* Multi */, get);\n    }\n    from(field, get) {\n        if (!get)\n            get = x => x;\n        return this.compute([field], state => get(state.field(field)));\n    }\n}\nfunction sameArray(a, b) {\n    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);\n}\nclass FacetProvider {\n    constructor(dependencies, facet, type, value) {\n        this.dependencies = dependencies;\n        this.facet = facet;\n        this.type = type;\n        this.value = value;\n        this.id = nextID++;\n    }\n    dynamicSlot(addresses) {\n        var _a;\n        let getter = this.value;\n        let compare = this.facet.compareInput;\n        let idx = addresses[this.id] >> 1, multi = this.type == 2 /* Multi */;\n        let depDoc = false, depSel = false, depAddrs = [];\n        for (let dep of this.dependencies) {\n            if (dep == \"doc\")\n                depDoc = true;\n            else if (dep == \"selection\")\n                depSel = true;\n            else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)\n                depAddrs.push(addresses[dep.id]);\n        }\n        return (state, tr) => {\n            if (!tr || tr.reconfigured) {\n                state.values[idx] = getter(state);\n                return 1 /* Changed */;\n            }\n            else {\n                let depChanged = (depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) ||\n                    depAddrs.some(addr => (ensureAddr(state, addr) & 1 /* Changed */) > 0);\n                if (!depChanged)\n                    return 0;\n                let newVal = getter(state), oldVal = tr.startState.values[idx];\n                if (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))\n                    return 0;\n                state.values[idx] = newVal;\n                return 1 /* Changed */;\n            }\n        };\n    }\n}\nfunction compareArray(a, b, compare) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!compare(a[i], b[i]))\n            return false;\n    return true;\n}\nfunction dynamicFacetSlot(addresses, facet, providers) {\n    let providerAddrs = providers.map(p => addresses[p.id]);\n    let providerTypes = providers.map(p => p.type);\n    let dynamic = providerAddrs.filter(p => !(p & 1));\n    let idx = addresses[facet.id] >> 1;\n    return (state, tr) => {\n        let oldAddr = !tr ? null : tr.reconfigured ? tr.startState.config.address[facet.id] : idx << 1;\n        let changed = oldAddr == null;\n        for (let dynAddr of dynamic) {\n            if (ensureAddr(state, dynAddr) & 1 /* Changed */)\n                changed = true;\n        }\n        if (!changed)\n            return 0;\n        let values = [];\n        for (let i = 0; i < providerAddrs.length; i++) {\n            let value = getAddr(state, providerAddrs[i]);\n            if (providerTypes[i] == 2 /* Multi */)\n                for (let val of value)\n                    values.push(val);\n            else\n                values.push(value);\n        }\n        let newVal = facet.combine(values);\n        if (oldAddr != null && facet.compare(newVal, getAddr(tr.startState, oldAddr)))\n            return 0;\n        state.values[idx] = newVal;\n        return 1 /* Changed */;\n    };\n}\nfunction maybeIndex(state, id) {\n    let found = state.config.address[id];\n    return found == null ? null : found >> 1;\n}\nconst initField = /*@__PURE__*/Facet.define({ static: true });\n/**\nFields can store additional information in an editor state, and\nkeep it in sync with the rest of the state.\n*/\nclass StateField {\n    constructor(\n    /**\n    @internal\n    */\n    id, createF, updateF, compareF, \n    /**\n    @internal\n    */\n    spec) {\n        this.id = id;\n        this.createF = createF;\n        this.updateF = updateF;\n        this.compareF = compareF;\n        this.spec = spec;\n        /**\n        @internal\n        */\n        this.provides = undefined;\n    }\n    /**\n    Define a state field.\n    */\n    static define(config) {\n        let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);\n        if (config.provide)\n            field.provides = config.provide(field);\n        return field;\n    }\n    create(state) {\n        let init = state.facet(initField).find(i => i.field == this);\n        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);\n    }\n    /**\n    @internal\n    */\n    slot(addresses) {\n        let idx = addresses[this.id] >> 1;\n        return (state, tr) => {\n            if (!tr || (tr.reconfigured && maybeIndex(tr.startState, this.id) == null)) {\n                state.values[idx] = this.create(state);\n                return 1 /* Changed */;\n            }\n            let oldVal, changed = 0;\n            if (tr.reconfigured) {\n                oldVal = tr.startState.values[maybeIndex(tr.startState, this.id)];\n                changed = 1 /* Changed */;\n            }\n            else {\n                oldVal = tr.startState.values[idx];\n            }\n            let value = this.updateF(oldVal, tr);\n            if (!changed && !this.compareF(oldVal, value))\n                changed = 1 /* Changed */;\n            if (changed)\n                state.values[idx] = value;\n            return changed;\n        };\n    }\n    /**\n    Returns an extension that enables this field and overrides the\n    way it is initialized. Can be useful when you need to provide a\n    non-default starting value for the field.\n    */\n    init(create) {\n        return [this, initField.of({ field: this, create })];\n    }\n    /**\n    State field instances can be used as\n    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a\n    given state.\n    */\n    get extension() { return this; }\n}\nconst Prec_ = { fallback: 3, default: 2, extend: 1, override: 0 };\nfunction prec(value) {\n    return (ext) => new PrecExtension(ext, value);\n}\n/**\nBy default extensions are registered in the order they are found\nin the flattened form of nested array that was provided.\nIndividual extension values can be assigned a precedence to\noverride this. Extensions that do not have a precedence set get\nthe precedence of the nearest parent with a precedence, or\n[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The\nfinal ordering of extensions is determined by first sorting by\nprecedence and then by order within each precedence.\n*/\nconst Prec = {\n    /**\n    A precedence below the default precedence, which will cause\n    default-precedence extensions to override it even if they are\n    specified later in the extension ordering.\n    */\n    fallback: /*@__PURE__*/prec(Prec_.fallback),\n    /**\n    The regular default precedence.\n    */\n    default: /*@__PURE__*/prec(Prec_.default),\n    /**\n    A higher-than-default precedence.\n    */\n    extend: /*@__PURE__*/prec(Prec_.extend),\n    /**\n    Precedence above the `default` and `extend` precedences.\n    */\n    override: /*@__PURE__*/prec(Prec_.override)\n};\nclass PrecExtension {\n    constructor(inner, prec) {\n        this.inner = inner;\n        this.prec = prec;\n    }\n}\n/**\nExtension compartments can be used to make a configuration\ndynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your\nconfiguration in a compartment, you can later\n[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a\ntransaction.\n*/\nclass Compartment {\n    /**\n    Create an instance of this compartment to add to your [state\n    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).\n    */\n    of(ext) { return new CompartmentInstance(this, ext); }\n    /**\n    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that\n    reconfigures this compartment.\n    */\n    reconfigure(content) {\n        return Compartment.reconfigure.of({ compartment: this, extension: content });\n    }\n    /**\n    Get the current content of the compartment in the state, or\n    `undefined` if it isn't present.\n    */\n    get(state) {\n        return state.config.compartments.get(this);\n    }\n}\nclass CompartmentInstance {\n    constructor(compartment, inner) {\n        this.compartment = compartment;\n        this.inner = inner;\n    }\n}\nclass Configuration {\n    constructor(base, compartments, dynamicSlots, address, staticValues) {\n        this.base = base;\n        this.compartments = compartments;\n        this.dynamicSlots = dynamicSlots;\n        this.address = address;\n        this.staticValues = staticValues;\n        this.statusTemplate = [];\n        while (this.statusTemplate.length < dynamicSlots.length)\n            this.statusTemplate.push(0 /* Uninitialized */);\n    }\n    staticFacet(facet) {\n        let addr = this.address[facet.id];\n        return addr == null ? facet.default : this.staticValues[addr >> 1];\n    }\n    static resolve(base, compartments, oldState) {\n        let fields = [];\n        let facets = Object.create(null);\n        let newCompartments = new Map();\n        for (let ext of flatten(base, compartments, newCompartments)) {\n            if (ext instanceof StateField)\n                fields.push(ext);\n            else\n                (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);\n        }\n        let address = Object.create(null);\n        let staticValues = [];\n        let dynamicSlots = [];\n        for (let field of fields) {\n            address[field.id] = dynamicSlots.length << 1;\n            dynamicSlots.push(a => field.slot(a));\n        }\n        for (let id in facets) {\n            let providers = facets[id], facet = providers[0].facet;\n            if (providers.every(p => p.type == 0 /* Static */)) {\n                address[facet.id] = (staticValues.length << 1) | 1;\n                let value = facet.combine(providers.map(p => p.value));\n                let oldAddr = oldState ? oldState.config.address[facet.id] : null;\n                if (oldAddr != null) {\n                    let oldVal = getAddr(oldState, oldAddr);\n                    if (facet.compare(value, oldVal))\n                        value = oldVal;\n                }\n                staticValues.push(value);\n            }\n            else {\n                for (let p of providers) {\n                    if (p.type == 0 /* Static */) {\n                        address[p.id] = (staticValues.length << 1) | 1;\n                        staticValues.push(p.value);\n                    }\n                    else {\n                        address[p.id] = dynamicSlots.length << 1;\n                        dynamicSlots.push(a => p.dynamicSlot(a));\n                    }\n                }\n                address[facet.id] = dynamicSlots.length << 1;\n                dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));\n            }\n        }\n        return new Configuration(base, newCompartments, dynamicSlots.map(f => f(address)), address, staticValues);\n    }\n}\nfunction flatten(extension, compartments, newCompartments) {\n    let result = [[], [], [], []];\n    let seen = new Map();\n    function inner(ext, prec) {\n        let known = seen.get(ext);\n        if (known != null) {\n            if (known >= prec)\n                return;\n            let found = result[known].indexOf(ext);\n            if (found > -1)\n                result[known].splice(found, 1);\n            if (ext instanceof CompartmentInstance)\n                newCompartments.delete(ext.compartment);\n        }\n        seen.set(ext, prec);\n        if (Array.isArray(ext)) {\n            for (let e of ext)\n                inner(e, prec);\n        }\n        else if (ext instanceof CompartmentInstance) {\n            if (newCompartments.has(ext.compartment))\n                throw new RangeError(`Duplicate use of compartment in extensions`);\n            let content = compartments.get(ext.compartment) || ext.inner;\n            newCompartments.set(ext.compartment, content);\n            inner(content, prec);\n        }\n        else if (ext instanceof PrecExtension) {\n            inner(ext.inner, ext.prec);\n        }\n        else if (ext instanceof StateField) {\n            result[prec].push(ext);\n            if (ext.provides)\n                inner(ext.provides, prec);\n        }\n        else if (ext instanceof FacetProvider) {\n            result[prec].push(ext);\n            if (ext.facet.extensions)\n                inner(ext.facet.extensions, prec);\n        }\n        else {\n            let content = ext.extension;\n            if (!content)\n                throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);\n            inner(content, prec);\n        }\n    }\n    inner(extension, Prec_.default);\n    return result.reduce((a, b) => a.concat(b));\n}\nfunction ensureAddr(state, addr) {\n    if (addr & 1)\n        return 2 /* Computed */;\n    let idx = addr >> 1;\n    let status = state.status[idx];\n    if (status == 4 /* Computing */)\n        throw new Error(\"Cyclic dependency between fields and/or facets\");\n    if (status & 2 /* Computed */)\n        return status;\n    state.status[idx] = 4 /* Computing */;\n    let changed = state.config.dynamicSlots[idx](state, state.applying);\n    return state.status[idx] = 2 /* Computed */ | changed;\n}\nfunction getAddr(state, addr) {\n    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];\n}\n\nconst languageData = /*@__PURE__*/Facet.define();\nconst allowMultipleSelections = /*@__PURE__*/Facet.define({\n    combine: values => values.some(v => v),\n    static: true\n});\nconst lineSeparator = /*@__PURE__*/Facet.define({\n    combine: values => values.length ? values[0] : undefined,\n    static: true\n});\nconst changeFilter = /*@__PURE__*/Facet.define();\nconst transactionFilter = /*@__PURE__*/Facet.define();\nconst transactionExtender = /*@__PURE__*/Facet.define();\n\n/**\nAnnotations are tagged values that are used to add metadata to\ntransactions in an extensible way. They should be used to model\nthings that effect the entire transaction (such as its [time\nstamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its\n[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen\n_alongside_ the other changes made by the transaction, [state\neffects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.\n*/\nclass Annotation {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The annotation type.\n    */\n    type, \n    /**\n    The value of this annotation.\n    */\n    value) {\n        this.type = type;\n        this.value = value;\n    }\n    /**\n    Define a new type of annotation.\n    */\n    static define() { return new AnnotationType(); }\n}\n/**\nMarker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).\n*/\nclass AnnotationType {\n    /**\n    Create an instance of this annotation.\n    */\n    of(value) { return new Annotation(this, value); }\n}\n/**\nRepresentation of a type of state effect. Defined with\n[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).\n*/\nclass StateEffectType {\n    /**\n    @internal\n    */\n    constructor(\n    // The `any` types in these function types are there to work\n    // around TypeScript issue #37631, where the type guard on\n    // `StateEffect.is` mysteriously stops working when these properly\n    // have type `Value`.\n    /**\n    @internal\n    */\n    map) {\n        this.map = map;\n    }\n    /**\n    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this\n    type.\n    */\n    of(value) { return new StateEffect(this, value); }\n}\n/**\nState effects can be used to represent additional effects\nassociated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They\nare often useful to model changes to custom [state\nfields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in\ndocument or selection changes.\n*/\nclass StateEffect {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    type, \n    /**\n    The value of this effect.\n    */\n    value) {\n        this.type = type;\n        this.value = value;\n    }\n    /**\n    Map this effect through a position mapping. Will return\n    `undefined` when that ends up deleting the effect.\n    */\n    map(mapping) {\n        let mapped = this.type.map(this.value, mapping);\n        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);\n    }\n    /**\n    Tells you whether this effect object is of a given\n    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).\n    */\n    is(type) { return this.type == type; }\n    /**\n    Define a new effect type. The type parameter indicates the type\n    of values that his effect holds.\n    */\n    static define(spec = {}) {\n        return new StateEffectType(spec.map || (v => v));\n    }\n    /**\n    Map an array of effects through a change set.\n    */\n    static mapEffects(effects, mapping) {\n        if (!effects.length)\n            return effects;\n        let result = [];\n        for (let effect of effects) {\n            let mapped = effect.map(mapping);\n            if (mapped)\n                result.push(mapped);\n        }\n        return result;\n    }\n}\n/**\nThis effect can be used to reconfigure the root extensions of\nthe editor. Doing this will discard any extensions\n[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset\nthe content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)\ncompartments.\n*/\nStateEffect.reconfigure = /*@__PURE__*/StateEffect.define();\n/**\nAppend extensions to the top-level configuration of the editor.\n*/\nStateEffect.appendConfig = /*@__PURE__*/StateEffect.define();\n/**\nChanges to the editor state are grouped into transactions.\nTypically, a user action creates a single transaction, which may\ncontain any number of document changes, may change the selection,\nor have other effects. Create a transaction by calling\n[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\n*/\nclass Transaction {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The state from which the transaction starts.\n    */\n    startState, \n    /**\n    The document changes made by this transaction.\n    */\n    changes, \n    /**\n    The selection set by this transaction, or undefined if it\n    doesn't explicitly set a selection.\n    */\n    selection, \n    /**\n    The effects added to the transaction.\n    */\n    effects, \n    /**\n    @internal\n    */\n    annotations, \n    /**\n    Whether the selection should be scrolled into view after this\n    transaction is dispatched.\n    */\n    scrollIntoView) {\n        this.startState = startState;\n        this.changes = changes;\n        this.selection = selection;\n        this.effects = effects;\n        this.annotations = annotations;\n        this.scrollIntoView = scrollIntoView;\n        /**\n        @internal\n        */\n        this._doc = null;\n        /**\n        @internal\n        */\n        this._state = null;\n        if (selection)\n            checkSelection(selection, changes.newLength);\n        if (!annotations.some((a) => a.type == Transaction.time))\n            this.annotations = annotations.concat(Transaction.time.of(Date.now()));\n    }\n    /**\n    The new document produced by the transaction. Contrary to\n    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't\n    force the entire new state to be computed right away, so it is\n    recommended that [transaction\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter\n    when they need to look at the new document.\n    */\n    get newDoc() {\n        return this._doc || (this._doc = this.changes.apply(this.startState.doc));\n    }\n    /**\n    The new selection produced by the transaction. If\n    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,\n    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's\n    current selection through the changes made by the transaction.\n    */\n    get newSelection() {\n        return this.selection || this.startState.selection.map(this.changes);\n    }\n    /**\n    The new state created by the transaction. Computed on demand\n    (but retained for subsequent access), so itis recommended not to\n    access it in [transaction\n    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.\n    */\n    get state() {\n        if (!this._state)\n            this.startState.applyTransaction(this);\n        return this._state;\n    }\n    /**\n    Get the value of the given annotation type, if any.\n    */\n    annotation(type) {\n        for (let ann of this.annotations)\n            if (ann.type == type)\n                return ann.value;\n        return undefined;\n    }\n    /**\n    Indicates whether the transaction changed the document.\n    */\n    get docChanged() { return !this.changes.empty; }\n    /**\n    Indicates whether this transaction reconfigures the state\n    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or\n    with a top-level configuration\n    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).\n    */\n    get reconfigured() { return this.startState.config != this.state.config; }\n}\n/**\nAnnotation used to store transaction timestamps.\n*/\nTransaction.time = /*@__PURE__*/Annotation.define();\n/**\nAnnotation used to associate a transaction with a user interface\nevent. The view will set this to...\n\n - `\"input\"` when the user types text\n - `\"delete\"` when the user deletes the selection or text near the selection\n - `\"keyboardselection\"` when moving the selection via the keyboard\n - `\"pointerselection\"` when moving the selection through the pointing device\n - `\"paste\"` when pasting content\n - `\"cut\"` when cutting\n - `\"drop\"` when content is inserted via drag-and-drop\n*/\nTransaction.userEvent = /*@__PURE__*/Annotation.define();\n/**\nAnnotation indicating whether a transaction should be added to\nthe undo history or not.\n*/\nTransaction.addToHistory = /*@__PURE__*/Annotation.define();\n/**\nAnnotation indicating (when present and true) that a transaction\nrepresents a change made by some other actor, not the user. This\nis used, for example, to tag other people's changes in\ncollaborative editing.\n*/\nTransaction.remote = /*@__PURE__*/Annotation.define();\nfunction joinRanges(a, b) {\n    let result = [];\n    for (let iA = 0, iB = 0;;) {\n        let from, to;\n        if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {\n            from = a[iA++];\n            to = a[iA++];\n        }\n        else if (iB < b.length) {\n            from = b[iB++];\n            to = b[iB++];\n        }\n        else\n            return result;\n        if (!result.length || result[result.length - 1] < from)\n            result.push(from, to);\n        else if (result[result.length - 1] < to)\n            result[result.length - 1] = to;\n    }\n}\nfunction mergeTransaction(a, b, sequential) {\n    var _a;\n    let mapForA, mapForB, changes;\n    if (sequential) {\n        mapForA = b.changes;\n        mapForB = ChangeSet.empty(b.changes.length);\n        changes = a.changes.compose(b.changes);\n    }\n    else {\n        mapForA = b.changes.map(a.changes);\n        mapForB = a.changes.mapDesc(b.changes, true);\n        changes = a.changes.compose(mapForA);\n    }\n    return {\n        changes,\n        selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),\n        effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),\n        annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,\n        scrollIntoView: a.scrollIntoView || b.scrollIntoView\n    };\n}\nfunction resolveTransactionInner(state, spec, docSize) {\n    let sel = spec.selection;\n    return {\n        changes: spec.changes instanceof ChangeSet ? spec.changes\n            : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),\n        selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),\n        effects: asArray(spec.effects),\n        annotations: asArray(spec.annotations),\n        scrollIntoView: !!spec.scrollIntoView\n    };\n}\nfunction resolveTransaction(state, specs, filter) {\n    let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);\n    if (specs.length && specs[0].filter === false)\n        filter = false;\n    for (let i = 1; i < specs.length; i++) {\n        if (specs[i].filter === false)\n            filter = false;\n        let seq = !!specs[i].sequential;\n        s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);\n    }\n    let tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);\n    return extendTransaction(filter ? filterTransaction(tr) : tr);\n}\n// Finish a transaction by applying filters if necessary.\nfunction filterTransaction(tr) {\n    let state = tr.startState;\n    // Change filters\n    let result = true;\n    for (let filter of state.facet(changeFilter)) {\n        let value = filter(tr);\n        if (value === false) {\n            result = false;\n            break;\n        }\n        if (Array.isArray(value))\n            result = result === true ? value : joinRanges(result, value);\n    }\n    if (result !== true) {\n        let changes, back;\n        if (result === false) {\n            back = tr.changes.invertedDesc;\n            changes = ChangeSet.empty(state.doc.length);\n        }\n        else {\n            let filtered = tr.changes.filter(result);\n            changes = filtered.changes;\n            back = filtered.filtered.invertedDesc;\n        }\n        tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);\n    }\n    // Transaction filters\n    let filters = state.facet(transactionFilter);\n    for (let i = filters.length - 1; i >= 0; i--) {\n        let filtered = filters[i](tr);\n        if (filtered instanceof Transaction)\n            tr = filtered;\n        else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)\n            tr = filtered[0];\n        else\n            tr = resolveTransaction(state, asArray(filtered), false);\n    }\n    return tr;\n}\nfunction extendTransaction(tr) {\n    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;\n    for (let i = extenders.length - 1; i >= 0; i--) {\n        let extension = extenders[i](tr);\n        if (extension && Object.keys(extension).length)\n            spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);\n    }\n    return spec == tr ? tr : new Transaction(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);\n}\nconst none = [];\nfunction asArray(value) {\n    return value == null ? none : Array.isArray(value) ? value : [value];\n}\n\n/**\nThe categories produced by a [character\ncategorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used\ndo things like selecting by word.\n*/\nvar CharCategory = /*@__PURE__*/(function (CharCategory) {\n    /**\n    Word characters.\n    */\n    CharCategory[CharCategory[\"Word\"] = 0] = \"Word\";\n    /**\n    Whitespace.\n    */\n    CharCategory[CharCategory[\"Space\"] = 1] = \"Space\";\n    /**\n    Anything else.\n    */\n    CharCategory[CharCategory[\"Other\"] = 2] = \"Other\";\nreturn CharCategory})(CharCategory || (CharCategory = {}));\nconst nonASCIISingleCaseWordChar = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\nlet wordChar;\ntry {\n    wordChar = /*@__PURE__*/new RegExp(\"[\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\n}\ncatch (_) { }\nfunction hasWordChar(str) {\n    if (wordChar)\n        return wordChar.test(str);\n    for (let i = 0; i < str.length; i++) {\n        let ch = str[i];\n        if (/\\w/.test(ch) || ch > \"\\x80\" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))\n            return true;\n    }\n    return false;\n}\nfunction makeCategorizer(wordChars) {\n    return (char) => {\n        if (!/\\S/.test(char))\n            return CharCategory.Space;\n        if (hasWordChar(char))\n            return CharCategory.Word;\n        for (let i = 0; i < wordChars.length; i++)\n            if (char.indexOf(wordChars[i]) > -1)\n                return CharCategory.Word;\n        return CharCategory.Other;\n    };\n}\n\n/**\nThe editor state class is a persistent (immutable) data structure.\nTo update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a\n[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state\ninstance, without modifying the original object.\n\nAs such, _never_ mutate properties of a state directly. That'll\njust break things.\n*/\nclass EditorState {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    config, \n    /**\n    The current document.\n    */\n    doc, \n    /**\n    The current selection.\n    */\n    selection, tr = null) {\n        this.config = config;\n        this.doc = doc;\n        this.selection = selection;\n        /**\n        @internal\n        */\n        this.applying = null;\n        this.status = config.statusTemplate.slice();\n        if (tr && tr.startState.config == config) {\n            this.values = tr.startState.values.slice();\n        }\n        else {\n            this.values = config.dynamicSlots.map(_ => null);\n            // Copy over old values for shared facets/fields if this is a reconfigure\n            if (tr)\n                for (let id in config.address) {\n                    let cur = config.address[id], prev = tr.startState.config.address[id];\n                    if (prev != null && (cur & 1) == 0)\n                        this.values[cur >> 1] = getAddr(tr.startState, prev);\n                }\n        }\n        this.applying = tr;\n        // Fill in the computed state immediately, so that further queries\n        // for it made during the update return this state\n        if (tr)\n            tr._state = this;\n        for (let i = 0; i < this.config.dynamicSlots.length; i++)\n            ensureAddr(this, i << 1);\n        this.applying = null;\n    }\n    field(field, require = true) {\n        let addr = this.config.address[field.id];\n        if (addr == null) {\n            if (require)\n                throw new RangeError(\"Field is not present in this state\");\n            return undefined;\n        }\n        ensureAddr(this, addr);\n        return getAddr(this, addr);\n    }\n    /**\n    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this\n    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)\n    can be passed. Unless\n    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the\n    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec\n    are assumed to start in the _current_ document (not the document\n    produced by previous specs), and its\n    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and\n    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer\n    to the document created by its _own_ changes. The resulting\n    transaction contains the combined effect of all the different\n    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later\n    specs take precedence over earlier ones.\n    */\n    update(...specs) {\n        return resolveTransaction(this, specs, true);\n    }\n    /**\n    @internal\n    */\n    applyTransaction(tr) {\n        let conf = this.config, { base, compartments } = conf;\n        for (let effect of tr.effects) {\n            if (effect.is(Compartment.reconfigure)) {\n                if (conf) {\n                    compartments = new Map;\n                    conf.compartments.forEach((val, key) => compartments.set(key, val));\n                    conf = null;\n                }\n                compartments.set(effect.value.compartment, effect.value.extension);\n            }\n            else if (effect.is(StateEffect.reconfigure)) {\n                conf = null;\n                base = effect.value;\n            }\n            else if (effect.is(StateEffect.appendConfig)) {\n                conf = null;\n                base = asArray(base).concat(effect.value);\n            }\n        }\n        new EditorState(conf || Configuration.resolve(base, compartments, this), tr.newDoc, tr.newSelection, tr);\n    }\n    /**\n    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that\n    replaces every selection range with the given content.\n    */\n    replaceSelection(text) {\n        if (typeof text == \"string\")\n            text = this.toText(text);\n        return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },\n            range: EditorSelection.cursor(range.from + text.length) }));\n    }\n    /**\n    Create a set of changes and a new selection by running the given\n    function for each range in the active selection. The function\n    can return an optional set of changes (in the coordinate space\n    of the start document), plus an updated range (in the coordinate\n    space of the document produced by the call's own changes). This\n    method will merge all the changes and ranges into a single\n    changeset and selection, and return it as a [transaction\n    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to\n    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).\n    */\n    changeByRange(f) {\n        let sel = this.selection;\n        let result1 = f(sel.ranges[0]);\n        let changes = this.changes(result1.changes), ranges = [result1.range];\n        let effects = asArray(result1.effects);\n        for (let i = 1; i < sel.ranges.length; i++) {\n            let result = f(sel.ranges[i]);\n            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);\n            for (let j = 0; j < i; j++)\n                ranges[j] = ranges[j].map(newMapped);\n            let mapBy = changes.mapDesc(newChanges, true);\n            ranges.push(result.range.map(mapBy));\n            changes = changes.compose(newMapped);\n            effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));\n        }\n        return {\n            changes,\n            selection: EditorSelection.create(ranges, sel.mainIndex),\n            effects\n        };\n    }\n    /**\n    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change\n    description, taking the state's document length and line\n    separator into account.\n    */\n    changes(spec = []) {\n        if (spec instanceof ChangeSet)\n            return spec;\n        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));\n    }\n    /**\n    Using the state's [line\n    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a\n    [`Text`](https://codemirror.net/6/docs/ref/#text.Text) instance from the given string.\n    */\n    toText(string) {\n        return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));\n    }\n    /**\n    Return the given range of the document as a string.\n    */\n    sliceDoc(from = 0, to = this.doc.length) {\n        return this.doc.sliceString(from, to, this.lineBreak);\n    }\n    /**\n    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).\n    */\n    facet(facet) {\n        let addr = this.config.address[facet.id];\n        if (addr == null)\n            return facet.default;\n        ensureAddr(this, addr);\n        return getAddr(this, addr);\n    }\n    /**\n    Convert this state to a JSON-serializable object. When custom\n    fields should be serialized, you can pass them in as an object\n    mapping property names (in the resulting object, which should\n    not use `doc` or `selection`) to fields.\n    */\n    toJSON(fields) {\n        let result = {\n            doc: this.sliceDoc(),\n            selection: this.selection.toJSON()\n        };\n        if (fields)\n            for (let prop in fields) {\n                let value = fields[prop];\n                if (value instanceof StateField)\n                    result[prop] = value.spec.toJSON(this.field(fields[prop]), this);\n            }\n        return result;\n    }\n    /**\n    Deserialize a state from its JSON representation. When custom\n    fields should be deserialized, pass the same object you passed\n    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as\n    third argument.\n    */\n    static fromJSON(json, config = {}, fields) {\n        if (!json || typeof json.doc != \"string\")\n            throw new RangeError(\"Invalid JSON representation for EditorState\");\n        let fieldInit = [];\n        if (fields)\n            for (let prop in fields) {\n                let field = fields[prop], value = json[prop];\n                fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));\n            }\n        return EditorState.create({\n            doc: json.doc,\n            selection: EditorSelection.fromJSON(json.selection),\n            extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit\n        });\n    }\n    /**\n    Create a new state. You'll usually only need this when\n    initializing an editor—updated states are created by applying\n    transactions.\n    */\n    static create(config = {}) {\n        let configuration = Configuration.resolve(config.extensions || [], new Map);\n        let doc = config.doc instanceof Text ? config.doc\n            : Text.of((config.doc || \"\").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));\n        let selection = !config.selection ? EditorSelection.single(0)\n            : config.selection instanceof EditorSelection ? config.selection\n                : EditorSelection.single(config.selection.anchor, config.selection.head);\n        checkSelection(selection, doc.length);\n        if (!configuration.staticFacet(allowMultipleSelections))\n            selection = selection.asSingle();\n        return new EditorState(configuration, doc, selection);\n    }\n    /**\n    The size (in columns) of a tab in the document, determined by\n    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.\n    */\n    get tabSize() { return this.facet(EditorState.tabSize); }\n    /**\n    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)\n    string for this state.\n    */\n    get lineBreak() { return this.facet(EditorState.lineSeparator) || \"\\n\"; }\n    /**\n    Look up a translation for the given phrase (via the\n    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the\n    original string if no translation is found.\n    */\n    phrase(phrase) {\n        for (let map of this.facet(EditorState.phrases))\n            if (Object.prototype.hasOwnProperty.call(map, phrase))\n                return map[phrase];\n        return phrase;\n    }\n    /**\n    Find the values for a given language data field, provided by the\n    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.\n    */\n    languageDataAt(name, pos) {\n        let values = [];\n        for (let provider of this.facet(languageData)) {\n            for (let result of provider(this, pos)) {\n                if (Object.prototype.hasOwnProperty.call(result, name))\n                    values.push(result[name]);\n            }\n        }\n        return values;\n    }\n    /**\n    Return a function that can categorize strings (expected to\n    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak))\n    into one of:\n    \n     - Word (contains an alphanumeric character or a character\n       explicitly listed in the local language's `\"wordChars\"`\n       language data, which should be a string)\n     - Space (contains only whitespace)\n     - Other (anything else)\n    */\n    charCategorizer(at) {\n        return makeCategorizer(this.languageDataAt(\"wordChars\", at).join(\"\"));\n    }\n    /**\n    Find the word at the given position, meaning the range\n    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters\n    around it. If no word characters are adjacent to the position,\n    this returns null.\n    */\n    wordAt(pos) {\n        let { text, from, length } = this.doc.lineAt(pos);\n        let cat = this.charCategorizer(pos);\n        let start = pos - from, end = pos - from;\n        while (start > 0) {\n            let prev = findClusterBreak(text, start, false);\n            if (cat(text.slice(prev, start)) != CharCategory.Word)\n                break;\n            start = prev;\n        }\n        while (end < length) {\n            let next = findClusterBreak(text, end);\n            if (cat(text.slice(end, next)) != CharCategory.Word)\n                break;\n            end = next;\n        }\n        return start == end ? EditorSelection.range(start + from, end + from) : null;\n    }\n}\n/**\nA facet that, when enabled, causes the editor to allow multiple\nranges to be selected. Be careful though, because by default the\neditor relies on the native DOM selection, which cannot handle\nmultiple selections. An extension like\n[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make\nsecondary selections visible to the user.\n*/\nEditorState.allowMultipleSelections = allowMultipleSelections;\n/**\nConfigures the tab size to use in this state. The first\n(highest-precedence) value of the facet is used. If no value is\ngiven, this defaults to 4.\n*/\nEditorState.tabSize = /*@__PURE__*/Facet.define({\n    combine: values => values.length ? values[0] : 4\n});\n/**\nThe line separator to use. By default, any of `\"\\n\"`, `\"\\r\\n\"`\nand `\"\\r\"` is treated as a separator when splitting lines, and\nlines are joined with `\"\\n\"`.\n\nWhen you configure a value here, only that precise separator\nwill be used, allowing you to round-trip documents through the\neditor without normalizing line separators.\n*/\nEditorState.lineSeparator = lineSeparator;\n/**\nRegisters translation phrases. The\n[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through\nall objects registered with this facet to find translations for\nits argument.\n*/\nEditorState.phrases = /*@__PURE__*/Facet.define();\n/**\nA facet used to register [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.\n*/\nEditorState.languageData = languageData;\n/**\nFacet used to register change filters, which are called for each\ntransaction (unless explicitly\n[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress\npart of the transaction's changes.\n\nSuch a function can return `true` to indicate that it doesn't\nwant to do anything, `false` to completely stop the changes in\nthe transaction, or a set of ranges in which changes should be\nsuppressed. Such ranges are represented as an array of numbers,\nwith each pair of two number indicating the start and end of a\nrange. So for example `[10, 20, 100, 110]` suppresses changes\nbetween 10 and 20, and between 100 and 110.\n*/\nEditorState.changeFilter = changeFilter;\n/**\nFacet used to register a hook that gets a chance to update or\nreplace transaction specs before they are applied. This will\nonly be applied for transactions that don't have\n[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You\ncan either return a single (possibly the input transaction), or\nan array of specs (which will be combined in the same way as the\narguments to [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).\n\nWhen possible, it is recommended to avoid accessing\n[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,\nsince it will force creation of a state that will then be\ndiscarded again, if the transaction is actually filtered.\n\n(This functionality should be used with care. Indiscriminately\nmodifying transaction is likely to break something or degrade\nthe user experience.)\n*/\nEditorState.transactionFilter = transactionFilter;\n/**\nThis is a more limited form of\n[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),\nwhich can only add\n[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and\n[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type\nof filter runs even the transaction has disabled regular\n[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable\nfor effects that don't need to touch the changes or selection,\nbut do want to process every transaction.\n\nExtenders run _after_ filters, when both are applied.\n*/\nEditorState.transactionExtender = transactionExtender;\nCompartment.reconfigure = /*@__PURE__*/StateEffect.define();\n\n/**\nUtility function for combining behaviors to fill in a config\nobject from an array of provided configs. Will, by default, error\nwhen a field gets two values that aren't `===`-equal, but you can\nprovide combine functions per field to do something else.\n*/\nfunction combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that\ncombine = {}) {\n    let result = {};\n    for (let config of configs)\n        for (let key of Object.keys(config)) {\n            let value = config[key], current = result[key];\n            if (current === undefined)\n                result[key] = value;\n            else if (current === value || value === undefined) ; // No conflict\n            else if (Object.hasOwnProperty.call(combine, key))\n                result[key] = combine[key](current, value);\n            else\n                throw new Error(\"Config merge conflict for field \" + key);\n        }\n    for (let key in defaults)\n        if (result[key] === undefined)\n            result[key] = defaults[key];\n    return result;\n}\n\nexport { Annotation, AnnotationType, ChangeDesc, ChangeSet, CharCategory, Compartment, EditorSelection, EditorState, Facet, MapMode, Prec, SelectionRange, StateEffect, StateEffectType, StateField, Transaction, combineConfig };\n"]},"metadata":{},"sourceType":"module"}