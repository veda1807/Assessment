{"ast":null,"code":"import { EditorView, ViewPlugin, BlockType, PluginField, Direction } from '@codemirror/view';\nimport { RangeValue, RangeSet } from '@codemirror/rangeset';\nimport { MapMode, Facet, combineConfig } from '@codemirror/state';\n/**\nA gutter marker represents a bit of information attached to a line\nin a specific gutter. Your own custom markers have to extend this\nclass.\n*/\n\nclass GutterMarker extends RangeValue {\n  /**\n  @internal\n  */\n  compare(other) {\n    return this == other || this.constructor == other.constructor && this.eq(other);\n  }\n  /**\n  Compare this marker to another marker of the same type.\n  */\n\n\n  eq(other) {\n    return false;\n  }\n  /**\n  @internal FIXME remove on next major version\n  */\n\n\n  at(pos) {\n    return this.range(pos);\n  }\n\n}\n\nGutterMarker.prototype.elementClass = \"\";\nGutterMarker.prototype.toDOM = undefined;\nGutterMarker.prototype.mapMode = MapMode.TrackBefore;\n/**\nFacet used to add a class to all gutter elements for a given line.\nMarkers given to this facet should _only_ define an\n[`elementclass`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.elementClass), not a\n[`toDOM`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.toDOM) (or the marker will appear\nin all gutters for the line).\n*/\n\nconst gutterLineClass = /*@__PURE__*/Facet.define();\nconst defaults = {\n  class: \"\",\n  renderEmptyElements: false,\n  elementStyle: \"\",\n  markers: () => RangeSet.empty,\n  lineMarker: () => null,\n  initialSpacer: null,\n  updateSpacer: null,\n  domEventHandlers: {}\n};\nconst activeGutters = /*@__PURE__*/Facet.define();\n/**\nDefine an editor gutter. The order in which the gutters appear is\ndetermined by their extension priority.\n*/\n\nfunction gutter(config) {\n  return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];\n}\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n  \".cm-gutters\": {\n    display: \"flex\",\n    height: \"100%\",\n    boxSizing: \"border-box\",\n    left: 0,\n    zIndex: 200\n  },\n  \"&light .cm-gutters\": {\n    backgroundColor: \"#f5f5f5\",\n    color: \"#999\",\n    borderRight: \"1px solid #ddd\"\n  },\n  \"&dark .cm-gutters\": {\n    backgroundColor: \"#333338\",\n    color: \"#ccc\"\n  },\n  \".cm-gutter\": {\n    display: \"flex !important\",\n    flexDirection: \"column\",\n    flexShrink: 0,\n    boxSizing: \"border-box\",\n    height: \"100%\",\n    overflow: \"hidden\"\n  },\n  \".cm-gutterElement\": {\n    boxSizing: \"border-box\"\n  },\n  \".cm-lineNumbers .cm-gutterElement\": {\n    padding: \"0 3px 0 5px\",\n    minWidth: \"20px\",\n    textAlign: \"right\",\n    whiteSpace: \"nowrap\"\n  },\n  \"&light .cm-activeLineGutter\": {\n    backgroundColor: \"#e2f2ff\"\n  },\n  \"&dark .cm-activeLineGutter\": {\n    backgroundColor: \"#222227\"\n  }\n});\nconst unfixGutters = /*@__PURE__*/Facet.define({\n  combine: values => values.some(x => x)\n});\n/**\nThe gutter-drawing plugin is automatically enabled when you add a\ngutter, but you can use this function to explicitly configure it.\n\nUnless `fixed` is explicitly set to `false`, the gutters are\nfixed, meaning they don't scroll along with the content\nhorizontally (except on Internet Explorer, which doesn't support\nCSS [`position:\nsticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).\n*/\n\nfunction gutters(config) {\n  let result = [gutterView, baseTheme];\n  if (config && config.fixed === false) result.push(unfixGutters.of(true));\n  return result;\n}\n\nconst gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {\n  constructor(view) {\n    this.view = view;\n    this.dom = document.createElement(\"div\");\n    this.dom.className = \"cm-gutters\";\n    this.dom.setAttribute(\"aria-hidden\", \"true\");\n    this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));\n\n    for (let gutter of this.gutters) this.dom.appendChild(gutter.dom);\n\n    this.fixed = !view.state.facet(unfixGutters);\n\n    if (this.fixed) {\n      // FIXME IE11 fallback, which doesn't support position: sticky,\n      // by using position: relative + event handlers that realign the\n      // gutter (or just force fixed=false on IE11?)\n      this.dom.style.position = \"sticky\";\n    }\n\n    view.scrollDOM.insertBefore(this.dom, view.contentDOM);\n    this.syncGutters();\n  }\n\n  update(update) {\n    if (this.updateGutters(update)) this.syncGutters();\n  }\n\n  syncGutters() {\n    let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);\n    let classSet = [];\n    let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport));\n    this.view.viewportLines(line => {\n      let text;\n\n      if (Array.isArray(line.type)) {\n        for (let b of line.type) if (b.type == BlockType.Text) {\n          text = b;\n          break;\n        }\n      } else {\n        text = line.type == BlockType.Text ? line : undefined;\n      }\n\n      if (!text) return;\n      if (classSet.length) classSet = [];\n      advanceCursor(lineClasses, classSet, line.from);\n\n      for (let cx of contexts) cx.line(this.view, text, classSet);\n    }, 0);\n\n    for (let cx of contexts) cx.finish();\n\n    this.dom.style.minHeight = this.view.contentHeight + \"px\";\n\n    if (this.view.state.facet(unfixGutters) != !this.fixed) {\n      this.fixed = !this.fixed;\n      this.dom.style.position = this.fixed ? \"sticky\" : \"\";\n    }\n  }\n\n  updateGutters(update) {\n    let prev = update.startState.facet(activeGutters),\n        cur = update.state.facet(activeGutters);\n    let change = update.docChanged || update.heightChanged || update.viewportChanged;\n\n    if (prev == cur) {\n      for (let gutter of this.gutters) if (gutter.update(update)) change = true;\n    } else {\n      change = true;\n      let gutters = [];\n\n      for (let conf of cur) {\n        let known = prev.indexOf(conf);\n\n        if (known < 0) {\n          gutters.push(new SingleGutterView(this.view, conf));\n        } else {\n          this.gutters[known].update(update);\n          gutters.push(this.gutters[known]);\n        }\n      }\n\n      for (let g of this.gutters) g.dom.remove();\n\n      for (let g of gutters) this.dom.appendChild(g.dom);\n\n      this.gutters = gutters;\n    }\n\n    return change;\n  }\n\n  destroy() {\n    this.dom.remove();\n  }\n\n}, {\n  provide: /*@__PURE__*/PluginField.scrollMargins.from(value => {\n    if (value.gutters.length == 0 || !value.fixed) return null;\n    return value.view.textDirection == Direction.LTR ? {\n      left: value.dom.offsetWidth\n    } : {\n      right: value.dom.offsetWidth\n    };\n  })\n});\n\nfunction asArray(val) {\n  return Array.isArray(val) ? val : [val];\n}\n\nfunction advanceCursor(cursor, collect, pos) {\n  while (cursor.value && cursor.from <= pos) {\n    if (cursor.from == pos) collect.push(cursor.value);\n    cursor.next();\n  }\n}\n\nclass UpdateContext {\n  constructor(gutter, viewport) {\n    this.gutter = gutter;\n    this.localMarkers = [];\n    this.i = 0;\n    this.height = 0;\n    this.cursor = RangeSet.iter(gutter.markers, viewport.from);\n  }\n\n  line(view, line, extraMarkers) {\n    if (this.localMarkers.length) this.localMarkers = [];\n    advanceCursor(this.cursor, this.localMarkers, line.from);\n    let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;\n    let forLine = this.gutter.config.lineMarker(view, line, localMarkers);\n    if (forLine) localMarkers.unshift(forLine);\n    let gutter = this.gutter;\n    if (localMarkers.length == 0 && !gutter.config.renderEmptyElements) return;\n    let above = line.top - this.height;\n\n    if (this.i == gutter.elements.length) {\n      let newElt = new GutterElement(view, line.height, above, localMarkers);\n      gutter.elements.push(newElt);\n      gutter.dom.appendChild(newElt.dom);\n    } else {\n      let elt = gutter.elements[this.i];\n      if (sameMarkers(localMarkers, elt.markers)) localMarkers = elt.markers;\n      elt.update(view, line.height, above, localMarkers);\n    }\n\n    this.height = line.bottom;\n    this.i++;\n  }\n\n  finish() {\n    let gutter = this.gutter;\n\n    while (gutter.elements.length > this.i) gutter.dom.removeChild(gutter.elements.pop().dom);\n  }\n\n}\n\nclass SingleGutterView {\n  constructor(view, config) {\n    this.view = view;\n    this.config = config;\n    this.elements = [];\n    this.spacer = null;\n    this.dom = document.createElement(\"div\");\n    this.dom.className = \"cm-gutter\" + (this.config.class ? \" \" + this.config.class : \"\");\n\n    for (let prop in config.domEventHandlers) {\n      this.dom.addEventListener(prop, event => {\n        let line = view.visualLineAtHeight(event.clientY, view.contentDOM.getBoundingClientRect().top);\n        if (config.domEventHandlers[prop](view, line, event)) event.preventDefault();\n      });\n    }\n\n    this.markers = asArray(config.markers(view));\n\n    if (config.initialSpacer) {\n      this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);\n      this.dom.appendChild(this.spacer.dom);\n      this.spacer.dom.style.cssText += \"visibility: hidden; pointer-events: none\";\n    }\n  }\n\n  update(update) {\n    let prevMarkers = this.markers;\n    this.markers = asArray(this.config.markers(update.view));\n\n    if (this.spacer && this.config.updateSpacer) {\n      let updated = this.config.updateSpacer(this.spacer.markers[0], update);\n      if (updated != this.spacer.markers[0]) this.spacer.update(update.view, 0, 0, [updated]);\n    }\n\n    return this.markers != prevMarkers;\n  }\n\n}\n\nclass GutterElement {\n  constructor(view, height, above, markers) {\n    this.height = -1;\n    this.above = 0;\n    this.dom = document.createElement(\"div\");\n    this.update(view, height, above, markers);\n  }\n\n  update(view, height, above, markers) {\n    if (this.height != height) this.dom.style.height = (this.height = height) + \"px\";\n    if (this.above != above) this.dom.style.marginTop = (this.above = above) ? above + \"px\" : \"\";\n\n    if (this.markers != markers) {\n      this.markers = markers;\n\n      for (let ch; ch = this.dom.lastChild;) ch.remove();\n\n      let cls = \"cm-gutterElement\";\n\n      for (let m of markers) {\n        if (m.toDOM) this.dom.appendChild(m.toDOM(view));\n        let c = m.elementClass;\n        if (c) cls += \" \" + c;\n      }\n\n      this.dom.className = cls;\n    }\n  }\n\n}\n\nfunction sameMarkers(a, b) {\n  if (a.length != b.length) return false;\n\n  for (let i = 0; i < a.length; i++) if (!a[i].compare(b[i])) return false;\n\n  return true;\n}\n/**\nFacet used to provide markers to the line number gutter.\n*/\n\n\nconst lineNumberMarkers = /*@__PURE__*/Facet.define();\nconst lineNumberConfig = /*@__PURE__*/Facet.define({\n  combine(values) {\n    return combineConfig(values, {\n      formatNumber: String,\n      domEventHandlers: {}\n    }, {\n      domEventHandlers(a, b) {\n        let result = Object.assign({}, a);\n\n        for (let event in b) {\n          let exists = result[event],\n              add = b[event];\n          result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;\n        }\n\n        return result;\n      }\n\n    });\n  }\n\n});\n\nclass NumberMarker extends GutterMarker {\n  constructor(number) {\n    super();\n    this.number = number;\n  }\n\n  eq(other) {\n    return this.number == other.number;\n  }\n\n  toDOM(_view) {\n    return document.createTextNode(this.number);\n  }\n\n}\n\nfunction formatNumber(view, number) {\n  return view.state.facet(lineNumberConfig).formatNumber(number, view.state);\n}\n\nconst lineNumberGutter = /*@__PURE__*/gutter({\n  class: \"cm-lineNumbers\",\n\n  markers(view) {\n    return view.state.facet(lineNumberMarkers);\n  },\n\n  lineMarker(view, line, others) {\n    if (others.some(m => m.toDOM)) return null;\n    return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));\n  },\n\n  initialSpacer(view) {\n    return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));\n  },\n\n  updateSpacer(spacer, update) {\n    let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));\n    return max == spacer.number ? spacer : new NumberMarker(max);\n  }\n\n});\n/**\nCreate a line number gutter extension.\n*/\n\nfunction lineNumbers(config = {}) {\n  return [lineNumberConfig.of(config), lineNumberGutter];\n}\n\nfunction maxLineNumber(lines) {\n  let last = 9;\n\n  while (last < lines) last = last * 10 + 9;\n\n  return last;\n}\n\nconst activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {\n  constructor() {\n    super(...arguments);\n    this.elementClass = \"cm-activeLineGutter\";\n  }\n\n  eq() {\n    return true;\n  }\n\n}();\nconst activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute([\"selection\"], state => {\n  let marks = [],\n      last = -1;\n\n  for (let range of state.selection.ranges) if (range.empty) {\n    let linePos = state.doc.lineAt(range.head).from;\n\n    if (linePos > last) {\n      last = linePos;\n      marks.push(activeLineGutterMarker.range(linePos));\n    }\n  }\n\n  return RangeSet.of(marks);\n});\n/**\nReturns an extension that adds a `cm-activeLineGutter` class to\nall gutter elements on the [active\nline](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).\n*/\n\nfunction highlightActiveLineGutter() {\n  return activeLineGutterHighlighter;\n}\n\nexport { GutterMarker, gutter, gutterLineClass, gutters, highlightActiveLineGutter, lineNumberMarkers, lineNumbers };","map":{"version":3,"sources":["D:/MSIT/Practicum - iLMS/AssessmentsSystem/node_modules/@codemirror/gutter/dist/index.js"],"names":["EditorView","ViewPlugin","BlockType","PluginField","Direction","RangeValue","RangeSet","MapMode","Facet","combineConfig","GutterMarker","compare","other","constructor","eq","at","pos","range","prototype","elementClass","toDOM","undefined","mapMode","TrackBefore","gutterLineClass","define","defaults","class","renderEmptyElements","elementStyle","markers","empty","lineMarker","initialSpacer","updateSpacer","domEventHandlers","activeGutters","gutter","config","gutters","of","Object","assign","baseTheme","display","height","boxSizing","left","zIndex","backgroundColor","color","borderRight","flexDirection","flexShrink","overflow","padding","minWidth","textAlign","whiteSpace","unfixGutters","combine","values","some","x","result","gutterView","fixed","push","fromClass","view","dom","document","createElement","className","setAttribute","state","facet","map","conf","SingleGutterView","appendChild","style","position","scrollDOM","insertBefore","contentDOM","syncGutters","update","updateGutters","lineClasses","iter","viewport","from","classSet","contexts","UpdateContext","viewportLines","line","text","Array","isArray","type","b","Text","length","advanceCursor","cx","finish","minHeight","contentHeight","prev","startState","cur","change","docChanged","heightChanged","viewportChanged","known","indexOf","g","remove","destroy","provide","scrollMargins","value","textDirection","LTR","offsetWidth","right","asArray","val","cursor","collect","next","localMarkers","i","extraMarkers","concat","forLine","unshift","above","top","elements","newElt","GutterElement","elt","sameMarkers","bottom","removeChild","pop","spacer","prop","addEventListener","event","visualLineAtHeight","clientY","getBoundingClientRect","preventDefault","cssText","prevMarkers","updated","marginTop","ch","lastChild","cls","m","c","a","lineNumberMarkers","lineNumberConfig","formatNumber","String","exists","add","NumberMarker","number","_view","createTextNode","lineNumberGutter","others","doc","lineAt","maxLineNumber","lines","max","lineNumbers","last","activeLineGutterMarker","arguments","activeLineGutterHighlighter","compute","marks","selection","ranges","linePos","head","highlightActiveLineGutter"],"mappings":"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","sourcesContent":["import { EditorView, ViewPlugin, BlockType, PluginField, Direction } from '@codemirror/view';\nimport { RangeValue, RangeSet } from '@codemirror/rangeset';\nimport { MapMode, Facet, combineConfig } from '@codemirror/state';\n\n/**\nA gutter marker represents a bit of information attached to a line\nin a specific gutter. Your own custom markers have to extend this\nclass.\n*/\nclass GutterMarker extends RangeValue {\n    /**\n    @internal\n    */\n    compare(other) {\n        return this == other || this.constructor == other.constructor && this.eq(other);\n    }\n    /**\n    Compare this marker to another marker of the same type.\n    */\n    eq(other) { return false; }\n    /**\n    @internal FIXME remove on next major version\n    */\n    at(pos) { return this.range(pos); }\n}\nGutterMarker.prototype.elementClass = \"\";\nGutterMarker.prototype.toDOM = undefined;\nGutterMarker.prototype.mapMode = MapMode.TrackBefore;\n/**\nFacet used to add a class to all gutter elements for a given line.\nMarkers given to this facet should _only_ define an\n[`elementclass`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.elementClass), not a\n[`toDOM`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.toDOM) (or the marker will appear\nin all gutters for the line).\n*/\nconst gutterLineClass = /*@__PURE__*/Facet.define();\nconst defaults = {\n    class: \"\",\n    renderEmptyElements: false,\n    elementStyle: \"\",\n    markers: () => RangeSet.empty,\n    lineMarker: () => null,\n    initialSpacer: null,\n    updateSpacer: null,\n    domEventHandlers: {}\n};\nconst activeGutters = /*@__PURE__*/Facet.define();\n/**\nDefine an editor gutter. The order in which the gutters appear is\ndetermined by their extension priority.\n*/\nfunction gutter(config) {\n    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-gutters\": {\n        display: \"flex\",\n        height: \"100%\",\n        boxSizing: \"border-box\",\n        left: 0,\n        zIndex: 200\n    },\n    \"&light .cm-gutters\": {\n        backgroundColor: \"#f5f5f5\",\n        color: \"#999\",\n        borderRight: \"1px solid #ddd\"\n    },\n    \"&dark .cm-gutters\": {\n        backgroundColor: \"#333338\",\n        color: \"#ccc\"\n    },\n    \".cm-gutter\": {\n        display: \"flex !important\",\n        flexDirection: \"column\",\n        flexShrink: 0,\n        boxSizing: \"border-box\",\n        height: \"100%\",\n        overflow: \"hidden\"\n    },\n    \".cm-gutterElement\": {\n        boxSizing: \"border-box\"\n    },\n    \".cm-lineNumbers .cm-gutterElement\": {\n        padding: \"0 3px 0 5px\",\n        minWidth: \"20px\",\n        textAlign: \"right\",\n        whiteSpace: \"nowrap\"\n    },\n    \"&light .cm-activeLineGutter\": {\n        backgroundColor: \"#e2f2ff\"\n    },\n    \"&dark .cm-activeLineGutter\": {\n        backgroundColor: \"#222227\"\n    }\n});\nconst unfixGutters = /*@__PURE__*/Facet.define({\n    combine: values => values.some(x => x)\n});\n/**\nThe gutter-drawing plugin is automatically enabled when you add a\ngutter, but you can use this function to explicitly configure it.\n\nUnless `fixed` is explicitly set to `false`, the gutters are\nfixed, meaning they don't scroll along with the content\nhorizontally (except on Internet Explorer, which doesn't support\nCSS [`position:\nsticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).\n*/\nfunction gutters(config) {\n    let result = [\n        gutterView,\n        baseTheme\n    ];\n    if (config && config.fixed === false)\n        result.push(unfixGutters.of(true));\n    return result;\n}\nconst gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutters\";\n        this.dom.setAttribute(\"aria-hidden\", \"true\");\n        this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));\n        for (let gutter of this.gutters)\n            this.dom.appendChild(gutter.dom);\n        this.fixed = !view.state.facet(unfixGutters);\n        if (this.fixed) {\n            // FIXME IE11 fallback, which doesn't support position: sticky,\n            // by using position: relative + event handlers that realign the\n            // gutter (or just force fixed=false on IE11?)\n            this.dom.style.position = \"sticky\";\n        }\n        view.scrollDOM.insertBefore(this.dom, view.contentDOM);\n        this.syncGutters();\n    }\n    update(update) {\n        if (this.updateGutters(update))\n            this.syncGutters();\n    }\n    syncGutters() {\n        let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);\n        let classSet = [];\n        let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport));\n        this.view.viewportLines(line => {\n            let text;\n            if (Array.isArray(line.type)) {\n                for (let b of line.type)\n                    if (b.type == BlockType.Text) {\n                        text = b;\n                        break;\n                    }\n            }\n            else {\n                text = line.type == BlockType.Text ? line : undefined;\n            }\n            if (!text)\n                return;\n            if (classSet.length)\n                classSet = [];\n            advanceCursor(lineClasses, classSet, line.from);\n            for (let cx of contexts)\n                cx.line(this.view, text, classSet);\n        }, 0);\n        for (let cx of contexts)\n            cx.finish();\n        this.dom.style.minHeight = this.view.contentHeight + \"px\";\n        if (this.view.state.facet(unfixGutters) != !this.fixed) {\n            this.fixed = !this.fixed;\n            this.dom.style.position = this.fixed ? \"sticky\" : \"\";\n        }\n    }\n    updateGutters(update) {\n        let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);\n        let change = update.docChanged || update.heightChanged || update.viewportChanged;\n        if (prev == cur) {\n            for (let gutter of this.gutters)\n                if (gutter.update(update))\n                    change = true;\n        }\n        else {\n            change = true;\n            let gutters = [];\n            for (let conf of cur) {\n                let known = prev.indexOf(conf);\n                if (known < 0) {\n                    gutters.push(new SingleGutterView(this.view, conf));\n                }\n                else {\n                    this.gutters[known].update(update);\n                    gutters.push(this.gutters[known]);\n                }\n            }\n            for (let g of this.gutters)\n                g.dom.remove();\n            for (let g of gutters)\n                this.dom.appendChild(g.dom);\n            this.gutters = gutters;\n        }\n        return change;\n    }\n    destroy() {\n        this.dom.remove();\n    }\n}, {\n    provide: /*@__PURE__*/PluginField.scrollMargins.from(value => {\n        if (value.gutters.length == 0 || !value.fixed)\n            return null;\n        return value.view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };\n    })\n});\nfunction asArray(val) { return (Array.isArray(val) ? val : [val]); }\nfunction advanceCursor(cursor, collect, pos) {\n    while (cursor.value && cursor.from <= pos) {\n        if (cursor.from == pos)\n            collect.push(cursor.value);\n        cursor.next();\n    }\n}\nclass UpdateContext {\n    constructor(gutter, viewport) {\n        this.gutter = gutter;\n        this.localMarkers = [];\n        this.i = 0;\n        this.height = 0;\n        this.cursor = RangeSet.iter(gutter.markers, viewport.from);\n    }\n    line(view, line, extraMarkers) {\n        if (this.localMarkers.length)\n            this.localMarkers = [];\n        advanceCursor(this.cursor, this.localMarkers, line.from);\n        let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;\n        let forLine = this.gutter.config.lineMarker(view, line, localMarkers);\n        if (forLine)\n            localMarkers.unshift(forLine);\n        let gutter = this.gutter;\n        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)\n            return;\n        let above = line.top - this.height;\n        if (this.i == gutter.elements.length) {\n            let newElt = new GutterElement(view, line.height, above, localMarkers);\n            gutter.elements.push(newElt);\n            gutter.dom.appendChild(newElt.dom);\n        }\n        else {\n            let elt = gutter.elements[this.i];\n            if (sameMarkers(localMarkers, elt.markers))\n                localMarkers = elt.markers;\n            elt.update(view, line.height, above, localMarkers);\n        }\n        this.height = line.bottom;\n        this.i++;\n    }\n    finish() {\n        let gutter = this.gutter;\n        while (gutter.elements.length > this.i)\n            gutter.dom.removeChild(gutter.elements.pop().dom);\n    }\n}\nclass SingleGutterView {\n    constructor(view, config) {\n        this.view = view;\n        this.config = config;\n        this.elements = [];\n        this.spacer = null;\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-gutter\" + (this.config.class ? \" \" + this.config.class : \"\");\n        for (let prop in config.domEventHandlers) {\n            this.dom.addEventListener(prop, (event) => {\n                let line = view.visualLineAtHeight(event.clientY, view.contentDOM.getBoundingClientRect().top);\n                if (config.domEventHandlers[prop](view, line, event))\n                    event.preventDefault();\n            });\n        }\n        this.markers = asArray(config.markers(view));\n        if (config.initialSpacer) {\n            this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);\n            this.dom.appendChild(this.spacer.dom);\n            this.spacer.dom.style.cssText += \"visibility: hidden; pointer-events: none\";\n        }\n    }\n    update(update) {\n        let prevMarkers = this.markers;\n        this.markers = asArray(this.config.markers(update.view));\n        if (this.spacer && this.config.updateSpacer) {\n            let updated = this.config.updateSpacer(this.spacer.markers[0], update);\n            if (updated != this.spacer.markers[0])\n                this.spacer.update(update.view, 0, 0, [updated]);\n        }\n        return this.markers != prevMarkers;\n    }\n}\nclass GutterElement {\n    constructor(view, height, above, markers) {\n        this.height = -1;\n        this.above = 0;\n        this.dom = document.createElement(\"div\");\n        this.update(view, height, above, markers);\n    }\n    update(view, height, above, markers) {\n        if (this.height != height)\n            this.dom.style.height = (this.height = height) + \"px\";\n        if (this.above != above)\n            this.dom.style.marginTop = (this.above = above) ? above + \"px\" : \"\";\n        if (this.markers != markers) {\n            this.markers = markers;\n            for (let ch; ch = this.dom.lastChild;)\n                ch.remove();\n            let cls = \"cm-gutterElement\";\n            for (let m of markers) {\n                if (m.toDOM)\n                    this.dom.appendChild(m.toDOM(view));\n                let c = m.elementClass;\n                if (c)\n                    cls += \" \" + c;\n            }\n            this.dom.className = cls;\n        }\n    }\n}\nfunction sameMarkers(a, b) {\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!a[i].compare(b[i]))\n            return false;\n    return true;\n}\n/**\nFacet used to provide markers to the line number gutter.\n*/\nconst lineNumberMarkers = /*@__PURE__*/Facet.define();\nconst lineNumberConfig = /*@__PURE__*/Facet.define({\n    combine(values) {\n        return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {\n            domEventHandlers(a, b) {\n                let result = Object.assign({}, a);\n                for (let event in b) {\n                    let exists = result[event], add = b[event];\n                    result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;\n                }\n                return result;\n            }\n        });\n    }\n});\nclass NumberMarker extends GutterMarker {\n    constructor(number) {\n        super();\n        this.number = number;\n    }\n    eq(other) { return this.number == other.number; }\n    toDOM(_view) { return document.createTextNode(this.number); }\n}\nfunction formatNumber(view, number) {\n    return view.state.facet(lineNumberConfig).formatNumber(number, view.state);\n}\nconst lineNumberGutter = /*@__PURE__*/gutter({\n    class: \"cm-lineNumbers\",\n    markers(view) { return view.state.facet(lineNumberMarkers); },\n    lineMarker(view, line, others) {\n        if (others.some(m => m.toDOM))\n            return null;\n        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));\n    },\n    initialSpacer(view) {\n        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));\n    },\n    updateSpacer(spacer, update) {\n        let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));\n        return max == spacer.number ? spacer : new NumberMarker(max);\n    }\n});\n/**\nCreate a line number gutter extension.\n*/\nfunction lineNumbers(config = {}) {\n    return [\n        lineNumberConfig.of(config),\n        lineNumberGutter\n    ];\n}\nfunction maxLineNumber(lines) {\n    let last = 9;\n    while (last < lines)\n        last = last * 10 + 9;\n    return last;\n}\nconst activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {\n    constructor() {\n        super(...arguments);\n        this.elementClass = \"cm-activeLineGutter\";\n    }\n    eq() { return true; }\n};\nconst activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute([\"selection\"], state => {\n    let marks = [], last = -1;\n    for (let range of state.selection.ranges)\n        if (range.empty) {\n            let linePos = state.doc.lineAt(range.head).from;\n            if (linePos > last) {\n                last = linePos;\n                marks.push(activeLineGutterMarker.range(linePos));\n            }\n        }\n    return RangeSet.of(marks);\n});\n/**\nReturns an extension that adds a `cm-activeLineGutter` class to\nall gutter elements on the [active\nline](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).\n*/\nfunction highlightActiveLineGutter() {\n    return activeLineGutterHighlighter;\n}\n\nexport { GutterMarker, gutter, gutterLineClass, gutters, highlightActiveLineGutter, lineNumberMarkers, lineNumbers };\n"]},"metadata":{},"sourceType":"module"}