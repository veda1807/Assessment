{"ast":null,"code":"var _jsxFileName = \"D:\\\\MSIT\\\\Practicum - iLMS\\\\AssessmentsSystem\\\\src\\\\Components\\\\Instructions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Button, Modal, Form } from 'react-bootstrap';\nimport { For } from 'react-loops';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Instructions(props) {\n  _s();\n\n  var instructions = props.instructions;\n  const [disabled, setDisabled] = useState(true);\n\n  function onChange() {\n    setDisabled(!disabled);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-instructions\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"my-card\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        className: \"my-cardbody-instructions\",\n        children: /*#__PURE__*/_jsxDEV(Card.Text, {\n          className: \"instructions-text\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Answer every question, unanswered and incomplete questions will not be awarded marks.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Clicking on next button redirects to next question.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Clicking on finish button redirects to results page.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Marks will be awarded if you attempt the quiz before the deadline.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Navigating to other tabs is considered as malpractice.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"If you are stuck at any question you can quit the quiz and reattempt it later.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(For, {\n              of: instructions,\n              as: item => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form, {\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                controlId: \"formBasicCheckbox\",\n                children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                  type: \"checkbox\",\n                  label: \"Check me out\",\n                  onChange: onChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 33,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          disabled: disabled,\n          onClick: props.onAcceptedInstructions,\n          className: \"my-btn\",\n          variant: \"success btn-right\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Instructions, \"+yaEkVZgVYFnFEzs+LrEIPZoDhI=\");\n\n_c = Instructions;\nexport default Instructions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Instructions\");","map":{"version":3,"sources":["D:/MSIT/Practicum - iLMS/AssessmentsSystem/src/Components/Instructions.js"],"names":["React","useEffect","useState","Card","Button","Modal","Form","For","Instructions","props","instructions","disabled","setDisabled","onChange","item","onAcceptedInstructions"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,sCAAP;AACA,SAAQC,IAAR,EAAaC,MAAb,EAAoBC,KAApB,EAA0BC,IAA1B,QAAqC,iBAArC;AACA,SAASC,GAAT,QAAoB,aAApB;;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AACzB,MAAIC,YAAY,GAAGD,KAAK,CAACC,YAAzB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;;AAEA,WAASW,QAAT,GAAoB;AAChBD,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA,8BACI,QAAC,IAAD,CAAM,MAAN;AAAa,QAAA,SAAS,EAAC,aAAvB;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,SAAS,EAAC,0BAArB;AAAA,+BACI,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,SAAS,EAAC,mBAArB;AAAA,iCACI;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANJ,eAOI,QAAC,GAAD;AAAK,cAAA,EAAE,EAAED,YAAT;AAAuB,cAAA,EAAE,EAAEI,IAAI,iBAC3B;AAAA,0BAAKA;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAPJ,eAUI,QAAC,IAAD;AAAA,qCACI,QAAC,IAAD,CAAM,KAAN;AAAY,gBAAA,SAAS,EAAC,mBAAtB;AAAA,uCACI,QAAC,IAAD,CAAM,KAAN;AAAY,kBAAA,IAAI,EAAC,UAAjB;AAA4B,kBAAA,KAAK,EAAC,cAAlC;AAAiD,kBAAA,QAAQ,EAAED;AAA3D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ,eAwBI,QAAC,IAAD,CAAM,MAAN;AAAA,+BACA,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAEF,QAAlB;AAA4B,UAAA,OAAO,EAAEF,KAAK,CAACM,sBAA3C;AAAmE,UAAA,SAAS,EAAC,QAA7E;AAAsF,UAAA,OAAO,EAAC,mBAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAgCH;;GAvCQP,Y;;KAAAA,Y;AAyCT,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Card,Button,Modal,Form} from 'react-bootstrap';\r\nimport { For } from 'react-loops';\r\n\r\nfunction Instructions(props) {\r\n    var instructions = props.instructions;\r\n    const [disabled, setDisabled] = useState(true);\r\n\r\n    function onChange() {\r\n        setDisabled(!disabled);\r\n    }\r\n    return(\r\n        <div className=\"my-instructions\">\r\n            <Card className=\"my-card\">\r\n                <Card.Header className=\"text-center\">\r\n                    <h3>Instructions</h3>\r\n                </Card.Header>\r\n                <Card.Body className=\"my-cardbody-instructions\">\r\n                    <Card.Text className=\"instructions-text\">\r\n                        <ul>\r\n                            <li>Answer every question, unanswered and incomplete questions will not be awarded marks.</li>\r\n                            <li>Clicking on next button redirects to next question.</li>\r\n                            <li>Clicking on finish button redirects to results page.</li>\r\n                            <li>Marks will be awarded if you attempt the quiz before the deadline.</li>\r\n                            <li>Navigating to other tabs is considered as malpractice.</li>\r\n                            <li>If you are stuck at any question you can quit the quiz and reattempt it later.</li>\r\n                            <For of={instructions} as={item =>\r\n                                <li>{item}</li>\r\n                            }/>\r\n                            <Form>\r\n                                <Form.Group controlId=\"formBasicCheckbox\">\r\n                                    <Form.Check type=\"checkbox\" label=\"Check me out\" onChange={onChange}/>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </ul>\r\n                    </Card.Text>\r\n                </Card.Body> \r\n                <Card.Footer>\r\n                <Button disabled={disabled} onClick={props.onAcceptedInstructions} className=\"my-btn\" variant=\"success btn-right\">Submit</Button>\r\n                </Card.Footer>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Instructions;"]},"metadata":{},"sourceType":"module"}