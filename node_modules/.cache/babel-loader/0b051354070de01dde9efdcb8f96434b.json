{"ast":null,"code":"var _jsxFileName = \"D:\\\\MSIT\\\\Practicum - iLMS\\\\AssessmentsSystem\\\\src\\\\Components\\\\Questions.js\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Button, Row, Col, InputGroup, Form } from 'react-bootstrap';\nimport isEmpty from '../utils/is-empty';\nimport NewLine from '../utils/NewLine';\nimport CodeQues from './CodeQues.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Questions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.displayQuestion = (questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) => {\n      let {\n        currentQuestionIndex,\n        isFinish\n      } = this.state;\n\n      if (!isEmpty(this.state.questions)) {\n        if (currentQuestionIndex >= questions.length - 1) {\n          isFinish = true;\n        }\n\n        questions = this.state.questions;\n        currentQuestion = questions[currentQuestionIndex];\n        nextQuestion = questions[currentQuestionIndex + 1];\n        previousQuestion = questions[currentQuestionIndex - 1]; //const answer = currentQuestion.answer;\n\n        this.setState({\n          currentQuestion,\n          nextQuestion,\n          previousQuestion,\n          isFinish //answer\n\n        });\n      }\n    };\n\n    this.displayNextQuestion = () => {\n      let {\n        questions,\n        currentQuestion,\n        nextQuestion,\n        previousQuestion\n      } = this.state;\n      this.setState(prevState => ({\n        currentQuestionIndex: prevState.currentQuestionIndex + 1\n      }), () => {\n        this.displayQuestion(questions, currentQuestion, nextQuestion, previousQuestion);\n      });\n    };\n\n    this.onFinish = () => {\n      const {\n        intervalId,\n        totalTimeTaken,\n        timer\n      } = this.state;\n      clearInterval(intervalId);\n      this.setState({\n        intervalId: undefined,\n        totalTimeTaken: timer\n      });\n      console.log(this.state.totalTimeTaken);\n    };\n\n    this.state = {\n      loading: true,\n      questions: props.questions,\n      currentQuestion: [],\n      nextQuestion: [],\n      previousQuestion: [],\n      answer: [],\n      numberOfQuestions: 0,\n      numberOfAnsweredQuestions: 0,\n      currentQuestionIndex: 0,\n      score: 0,\n      correctAnswers: 0,\n      wrongAnswers: 0,\n      time: 0,\n      timer: '00:00:00',\n      isFinish: false,\n      intervalId: undefined,\n      totalTimeTaken: ''\n    };\n  }\n\n  updateCountdown() {\n    let {\n      time\n    } = this.state;\n    time++;\n    let minutes = Math.floor(time / 60);\n    let hours = Math.floor(minutes / 60);\n    let actMinutes = minutes % 60;\n    let seconds = time % 60;\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    actMinutes = actMinutes < 10 ? actMinutes < 1 ? '00' : '0' + actMinutes : actMinutes;\n    hours = hours < 10 ? hours < 1 ? '00' : '0' + hours : hours;\n    let timer = \"\" + hours + \":\" + actMinutes + \":\" + seconds;\n    this.setState({\n      time: time,\n      timer: timer\n    });\n  }\n\n  componentDidMount() {\n    const {\n      questions,\n      currentQuestion,\n      nextQuestion,\n      previousQuestion\n    } = this.state;\n    this.displayQuestion(questions, currentQuestion, nextQuestion, previousQuestion); //set timer\n\n    var newintervalId = setInterval(this.updateCountdown.bind(this), 1000);\n    this.setState({\n      intervalId: newintervalId\n    });\n  }\n\n  render() {\n    const {\n      currentQuestion\n    } = this.state;\n    const questionType = currentQuestion.type;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"my-questionpg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"details\",\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                sm: \"6\",\n                children: /*#__PURE__*/_jsxDEV(\"h5\", {\n                  className: \"text-center\",\n                  children: [\"Answered questions : 0/\", this.state.questions.length]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Col, {\n                sm: \"6\",\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"text-center\",\n                  children: this.state.timer\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"my-card\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                children: /*#__PURE__*/_jsxDEV(Col, {\n                  children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                    className: \"text-center\",\n                    children: [\"Question \", this.state.currentQuestionIndex + 1]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 131,\n                    columnNumber: 38\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), questionType === \"Fillup\" && /*#__PURE__*/_jsxDEV(Card.Body, {\n              className: \"my-cardbody-fillups\",\n              children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"question\",\n                  children: /*#__PURE__*/_jsxDEV(NewLine, {\n                    className: \"box\",\n                    text: currentQuestion.question\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 70\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                className: \"fillups-text\",\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  controlId: \"exampleForm.ControlTextarea1\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                    children: \"Answer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"textarea\",\n                    rows: 3,\n                    className: \"my-input\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"success\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this), questionType === \"Editor\" && /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: /*#__PURE__*/_jsxDEV(CodeQues, {\n                  question: currentQuestion.question\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"success\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n              children: [!this.state.isFinish && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                className: \"my-btn\",\n                onClick: this.displayNextQuestion,\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 54\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/results\",\n                children: this.state.isFinish && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  className: \"my-btn\",\n                  onClick: this.onFinish,\n                  to: \"/Results\",\n                  children: \"Finish\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 166,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"danger\",\n                  className: \"my-btn\",\n                  to: \"/\",\n                  children: \"Quit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Questions;","map":{"version":3,"sources":["D:/MSIT/Practicum - iLMS/AssessmentsSystem/src/Components/Questions.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Link","Card","Button","Row","Col","InputGroup","Form","isEmpty","NewLine","CodeQues","Questions","constructor","props","displayQuestion","questions","state","currentQuestion","nextQuestion","previousQuestion","currentQuestionIndex","isFinish","length","setState","displayNextQuestion","prevState","onFinish","intervalId","totalTimeTaken","timer","clearInterval","undefined","console","log","loading","answer","numberOfQuestions","numberOfAnsweredQuestions","score","correctAnswers","wrongAnswers","time","updateCountdown","minutes","Math","floor","hours","actMinutes","seconds","componentDidMount","newintervalId","setInterval","bind","render","questionType","type","question"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Card,Button,Row,Col,InputGroup,Form} from 'react-bootstrap';\r\nimport isEmpty from '../utils/is-empty';\r\nimport NewLine from '../utils/NewLine';\r\nimport CodeQues from './CodeQues.js';\r\n            \r\nclass Questions extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            loading: true,\r\n            questions: props.questions,\r\n            currentQuestion: [],\r\n            nextQuestion: [],\r\n            previousQuestion: [],\r\n            answer: [],\r\n            numberOfQuestions: 0,\r\n            numberOfAnsweredQuestions: 0,\r\n            currentQuestionIndex: 0,\r\n            score: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            time: 0,\r\n            timer: '00:00:00',\r\n            isFinish: false,\r\n            intervalId: undefined,\r\n            totalTimeTaken: ''\r\n        };\r\n    }\r\n\r\n    displayQuestion = (questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) => {\r\n      let { currentQuestionIndex, isFinish } = this.state;\r\n        if( !isEmpty(this.state.questions) ){\r\n            if(currentQuestionIndex >= questions.length - 1){\r\n                isFinish = true;\r\n            }\r\n            questions = this.state.questions;\r\n            currentQuestion = questions[currentQuestionIndex];\r\n            nextQuestion = questions[currentQuestionIndex + 1];\r\n            previousQuestion = questions[currentQuestionIndex - 1];\r\n            //const answer = currentQuestion.answer;\r\n            this.setState({\r\n                currentQuestion,\r\n                nextQuestion,\r\n                previousQuestion,\r\n                isFinish\r\n                //answer\r\n            });\r\n        }\r\n    };\r\n\r\n    displayNextQuestion = () => {\r\n        let { questions, currentQuestion, nextQuestion, previousQuestion } = this.state;\r\n        this.setState(prevState => ({\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1\r\n        }), () => {\r\n            this.displayQuestion(questions, currentQuestion, nextQuestion, previousQuestion);\r\n        });\r\n    };\r\n\r\n    onFinish = () => {\r\n        const{ intervalId, totalTimeTaken, timer} = this.state;\r\n        clearInterval(intervalId);\r\n        this.setState({\r\n            intervalId: undefined,\r\n            totalTimeTaken: timer\r\n        });\r\n        console.log(this.state.totalTimeTaken);\r\n    }\r\n\r\n    updateCountdown(){\r\n        let { time } = this.state;\r\n        time++;\r\n        let minutes = Math.floor(time / 60);\r\n        let hours = Math.floor(minutes / 60);\r\n        let actMinutes = minutes % 60;\r\n        let seconds = time % 60;\r\n      \r\n        seconds = seconds < 10 ? '0' + seconds : seconds; \r\n        actMinutes = actMinutes < 10 ? actMinutes < 1 ? '00' : '0' + actMinutes : actMinutes;\r\n        hours = hours < 10 ? hours < 1 ? '00' : '0' + hours : hours;\r\n\r\n        let timer = \"\"+hours+\":\"+actMinutes+\":\"+seconds;\r\n      \r\n        this.setState({\r\n            time: time,\r\n            timer: timer\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n    \r\n        const {questions, currentQuestion, nextQuestion, previousQuestion} = this.state;\r\n        this.displayQuestion(questions, currentQuestion, nextQuestion, previousQuestion);\r\n\r\n        //set timer\r\n        var newintervalId = setInterval(this.updateCountdown.bind(this), 1000);\r\n        this.setState({intervalId: newintervalId});\r\n    }\r\n\r\n    render(){\r\n\r\n        const { currentQuestion } = this.state;\r\n        const questionType = currentQuestion.type;\r\n\r\n        return (\r\n            <div>  \r\n                <div className=\"my-questionpg\">\r\n                    <div  className=\"sidebar\">\r\n                        <div className=\"details\">\r\n                            <Row>\r\n                                \r\n                                <Col sm=\"6\"><h5 className=\"text-center\">Answered questions : 0/{this.state.questions.length}</h5></Col>\r\n                                <Col sm=\"6\"><h3 className=\"text-center\">{this.state.timer}</h3></Col>\r\n                                \r\n                                {/* <Col sm=\"4\"><h5 className=\"text-right my-deadaline\">Deadline : {details[0].Deadline}</h5></Col> */}\r\n                            </Row>\r\n                        </div>  \r\n                    </div>\r\n                    <div>\r\n                        <Card className=\"my-card\">\r\n                            <Card.Header>\r\n                                <Row>\r\n                                <Col><h3 className=\"text-center\">Question {this.state.currentQuestionIndex+1}</h3></Col>\r\n                                {/* <Col sm=\"6\"><label>No of attempts</label>\r\n                                <ProgressBar className=\"my-ProgressBar\" now={now} label={`${now}%`} /> </Col> */}\r\n                                </Row>\r\n                            </Card.Header>\r\n\r\n                            {/* For fillup type quetions */}\r\n                            {questionType === \"Fillup\" &&\r\n                            <Card.Body className=\"my-cardbody-fillups\">\r\n                                <Card.Text><div className=\"question\"><NewLine className=\"box\" text={currentQuestion.question} /></div></Card.Text>\r\n                                <Card.Text className=\"fillups-text\">\r\n                                    <Form.Group controlId=\"exampleForm.ControlTextarea1\" > \r\n                                        <h5>Answer</h5>\r\n                                        <Form.Control as=\"textarea\" rows={3} className=\"my-input\"/>\r\n                                    </Form.Group>\r\n                                    <Button variant=\"success\">Submit</Button> \r\n                                </Card.Text>\r\n                            </Card.Body> }\r\n\r\n                            {/* For editor type questions */}\r\n                            {questionType === \"Editor\" &&\r\n                            <Card.Body>\r\n                                <Card.Title></Card.Title>\r\n                                <Card.Text>\r\n                                    {/* <h5>{currentQuestion.question}</h5> */}\r\n                                    <CodeQues \r\n                                        question = {currentQuestion.question}\r\n                                    />\r\n                                </Card.Text>\r\n                                <Button variant=\"success\">Submit</Button> \r\n                            </Card.Body> }\r\n\r\n                            <Card.Footer>\r\n                            {!this.state.isFinish && <Button variant=\"primary\"className=\"my-btn\" onClick={this.displayNextQuestion} >Next</Button>}\r\n                            <Link to=\"/results\">\r\n                            {this.state.isFinish && <Button variant=\"primary\" className=\"my-btn\" onClick={this.onFinish}  to=\"/Results\">Finish</Button>}\r\n                            </Link>\r\n                            <Link to=\"/\">\r\n                                <Button variant=\"danger\" className=\"my-btn\"  to=\"/\">Quit</Button>\r\n                            </Link>\r\n                            </Card.Footer>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )};\r\n  }\r\n  \r\n  export default Questions;"]},"metadata":{},"sourceType":"module"}