'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lezerPython = require('lezer-python');
var language = require('@codemirror/language');
var highlight = require('@codemirror/highlight');

/// A language provider based on the [Lezer Python
/// parser](https://github.com/lezer-parser/python), extended with
/// highlighting and indentation information.
const pythonLanguage = language.LezerLanguage.define({
    parser: lezerPython.parser.configure({
        props: [
            language.indentNodeProp.add({
                Body: language.continuedIndent()
            }),
            language.foldNodeProp.add({
                "Body ArrayExpression DictionaryExpression": language.foldInside
            }),
            highlight.styleTags({
                "async '*' '**' FormatConversion": highlight.tags.modifier,
                "for while if elif else try except finally return raise break continue with pass assert await yield": highlight.tags.controlKeyword,
                "in not and or is del": highlight.tags.operatorKeyword,
                "import from def class global nonlocal lambda": highlight.tags.definitionKeyword,
                "with as print": highlight.tags.keyword,
                self: highlight.tags.self,
                Boolean: highlight.tags.bool,
                None: highlight.tags.null,
                VariableName: highlight.tags.variableName,
                "CallExpression/VariableName": highlight.tags.function(highlight.tags.variableName),
                "FunctionDefinition/VariableName": highlight.tags.function(highlight.tags.definition(highlight.tags.variableName)),
                "ClassDefinition/VariableName": highlight.tags.definition(highlight.tags.className),
                PropertyName: highlight.tags.propertyName,
                "CallExpression/MemberExpression/ProperyName": highlight.tags.function(highlight.tags.propertyName),
                Comment: highlight.tags.lineComment,
                Number: highlight.tags.number,
                String: highlight.tags.string,
                FormatString: highlight.tags.special(highlight.tags.string),
                UpdateOp: highlight.tags.updateOperator,
                ArithOp: highlight.tags.arithmeticOperator,
                BitOp: highlight.tags.bitwiseOperator,
                CompareOp: highlight.tags.compareOperator,
                AssignOp: highlight.tags.definitionOperator,
                Ellipsis: highlight.tags.punctuation,
                At: highlight.tags.meta,
                "( )": highlight.tags.paren,
                "[ ]": highlight.tags.squareBracket,
                "{ }": highlight.tags.brace,
                ".": highlight.tags.derefOperator,
                ", ;": highlight.tags.separator
            })
        ],
    }),
    languageData: {
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "'''", '"""'] },
        commentTokens: { line: "#" },
        indentOnInput: /^\s*[\}\]\)]$/
    }
});
/// Python language support.
function python() {
    return new language.LanguageSupport(pythonLanguage);
}

exports.python = python;
exports.pythonLanguage = pythonLanguage;
